{"version":3,"sources":["components/Editor/Editor.js","components/Header.js","panels/CodeEditorPanel.js","panels/DataEditorPanel.js","descriptions/descriptions.js","descriptor/global.js","descriptor/utils.js","panels/VisualizationGivenDataPanel.js","components/Loader.js","utils/color.js","components/Descriptions.js","panels/DescriptionPanel.js","demo/demo.js","linkConditions/utils.js","linkConditions/conditionOperations.js","descriptor/NLDComponents.js","descriptor/compare.js","attributeRelation/attributeRelation.js","attributeRelation/graphDistance.js","descriptor/entity2element.js","components/TitleBar.js","utils/parameterStyle.js","Main.js","descriptor/index.js","linkConditions/linkCondition.js","components/GallaryItem.js","pages/HomePage.js","App.js","reportWebVitals.js","index.js"],"names":["Editor","code","setCode","language","style","fontFamily","value","onValueChange","highlight","languages","padding","className","Header","title","height","width","lineHeight","fontWeight","borderLeft","fontSize","color","textIndent","CodeEditorPanel","codeStr","setCodeStr","submit","useState","modified","setModified","minWidth","margin","display","flexDirection","marginTop","background","position","right","top","zIndex","cursor","onClick","e","DataEditorPanel","dataStr","setDataStr","linkConditionDescription","linkConditions","Array","isArray","length","condition","slice","sort","a","b","coverage","relation","attribute","SUPPORTED_TYPES","Set","COMMON_STYLE_CHANNELS","DEFAULT_ATTRIBUTE","Map","fill","stroke","rx","ry","BASIC_SVG_ELEMENTS","forEach","attributes","name","concat","set","SHARED_CHANNELS","DESCRIPTION_TEMPLATE","constituent","entityType","numberOfElementsEachEntity","_entityType","_numberOfElementsEachEntity","onePrimitive","numberOfLabels","ordinal","tagName","multiPrimitive","tagNames","textualizeVaringStringArray","multiPrimitiveTagName","attrVal","_tagName","_attrName","_attrVal","textualizeStringArray","channels2attribute","isfirstWordUpper","channels","samePrimitive","sameLabelIs","sameLabelIBegin","sameLabelIsStop","correlationC2C","chanName","attrName","chanVal","attrVals","correlationN2C","attrValMin","attrValMax","correlationN2N","isUp","correlationUndefined","PARAMETER_TYPE","entity","element","channel","NUMERICAL","CATEGORICAL","dom","ownAttrs","computedStyles","Object","assign","i","BASIC_STYLES","get","cx","baseVal","cy","x1","y1","x2","y2","x","y","points","from","map","point","textContent","object","isEqual","every","_","aProps","getOwnPropertyNames","bProps","propName","this","console","error","deepcopy","obj","JSON","parse","stringify","dfs","callback","stack","index","children","indexNext","pop","child","push","NoLinDiagram","data","nodeAttrs","linkAttrs","nodes","node","attr","entries","key","has","links","link","delete","computeAttributeTypeAndRange","NUMERICAL_LENGTH_THRESHOLD","range","isAllNumerical","type","array","connector","str","item","join","number2ordinal","number","n","special","deca","Math","floor","VisualizationGivenDataPanel","dataFolder","svg","elementInfo","label2Encodings","layoutDescriptions","visibleElements","entityElementsGroups","ref","nodeMeanings","useRef","setInfo","setElement","setEncodings","setToolTipVisible","setToolTipTop","setToolTipLeft","setData","useEffect","current","innerHTML","appendChild","d3","on","el","target","hasAttribute","idx","parseInt","getAttribute","info","label2attr2diff","label","res","keys","l","attrs","styles","indexOf","split","filter","getEncodings","d","datum","descriptionElements","document","body","Loader","state","colorTable","findSimiliarColor","colorRGBA","r","g","minDistance","Number","MAX_VALUE","term","vec","r_","g_","b_","DescriptionTerm","description","elements","onMouseOver","backgroundColor","onMouseLeave","dangerouslySetInnerHTML","__html","content","getTreeData","graphDescriptions","defaultExpandNodes","parentKey","switch","Descriptions","loadingText","loading","treeData","marginLeft","selectable","defaultExpandedKeys","DescriptionPanel","switchedOn","linkMeaningsDescription","setLinkMeaningsDescription","nodeMeaningsDescription","setNodeMeaningsDescription","linkingCondition","parameters","paddingLeft","orientation","demos","miserables","nodeEncoding","preload","demo","fetch","then","text","json","extractAttributes","k","v","arr","min","max","q1","q3","getNumericalStats","generateLinkingConditions","node1","node2","val1","val2","undefined","overlap","l2","includes","combinations","results","copy","prefix","powerSet","abs","getNormalizedDifference","rawDiff","unionCondition","condition1","condition2","accumulateCondition","excludeCondition","NLDCompDiff","isItemEmpty","indexes","unstableComponents","unstableArray","unstableItem","NLDComponents","osvg","basicElementArray","anotherNLDComponents","diff","ele1","ele2","eleDiff","compare","element1","element2","NLDComponents1","NLDComponents2","diffWith","computePearsonCorrelation","X","Y","Statistics","correlationCoefficient","checkDataType","isNaN","parseFloat","first","second","isInteger","size","attributeRelation","threshold","dataTypeX","dataTypeY","pearsonCorrelation","typeX","typeY","correlation","add","attributeMapping","MIN_VALUE","layoutRelation","graph","N","idToIdx","id","euclidMatrix","j","sqrt","floydMatrix","Infinity","fr","to","calcDistance","flat","combined","floyd","euclid","mapAttribute2Channel","func","entity2element","element2label","svgOrigin","nldOrigin","shuffledGraph","shuffledRange","svgShuffled","nldShuffled","diffs","isEmpty","eliminate","diffItem","elementIndex","attr2diff","diff1","diff2","mergedDiff","mergeDiff","label2elements","element2entity","eleIndexSet","entityIndex","eleIndex","channelNames","mapEntity2Element","labelsOfElements","swapCache","log","clonedGraph","thisEntity","svgControl","entitiesWithDiffAttr_INDEX","findEntitiesWithDiffAttr_INDEX","valueStack","isAttributesAllSame","some","elementFrequency","nldControl","nldBeforeSwap","nldAfterSwap","indexofSwapDiff","svgAfterSwap","swapDiff","getIndexOfDifferences","elementJndex","TitleBar","borderBottom","processValue","replace","styleParameter","parameter","test","DESCRIPTIONS","LEGENDS","Main","runID","setRunID","setLoading","createElement","SVG","setSVG","setVisibleElements","graphDescripitons","setGraphDescriptions","setLayoutDescriptions","setElementInfo","setLabel2Encodings","setLinkConditions","setEntityElementsGroups","techniqueChoice","useParams","setDataFolder","getPreloadData","firstChild","allElements","ele","svgToArray","descriptions","desc","elementsIdx","oridata","beginTime","performance","now","Function","nldComponents","node2element","nodeElement2label","link2element","linkElement2label","element2link","node2element_i","linkElements","linkset","nodeset","nodeLabel2attr2diff","linkLabel2attr2diff","configs","genDescsForAttr2Diff","attr2diffEntries","relatedElements","relatedElementsIdx","result","encodingDetailDescription","template","elementSet","descrpitionSentence","classes","label2class","elementDescription","tagNameChoiceDescriptions","tagName2attr2val","reduce","val","commonStyleDiff","thisTagNameRelatedElements","thisTagNameRelatedElementsIdx","valueArrayOfAttributesControlsThisTag","thisTagNameDescriptions","attr2diffEntriesWithThisTag","thisTagDiff","svgBBox","getBoundingClientRect","elementIndexSet","box","removeChild","endTime","setAttribute","allElementsIdx","xs","ys","xAttrs","yAttrs","xRelation","yRelation","axis","attrNames","descriptor","svgStr","XMLSerializer","serializeToString","preloadData","fetchEncodingDescriptions","conditions","nodeMap","linkSet","source","excludeUnionResult","linkCnt","possibleConditions","frequency","linkCondition","newSvg","cloneNode","_idx","_info","remove","bbox","getBBox","entityElementsGroup","group","maxBBox","maxWidth","left","transform","paddingBottom","flex","overflowY","GallaryItem","image","route","history","useHistory","hoverable","borderRadius","cover","alt","src","objectFit","Meta","whiteSpace","textOverflow","overflow","HomePage","alignItems","marginBottom","flexWrap","justifyContent","class","titleMap","nodeMeaningsMap","App","exact","path","render","match","params","reportWebVitals","onPerfEntry","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.dfab8a91.chunk.js","sourcesContent":["import React from \"react\";\r\nimport SimpleCodeEditor from \"react-simple-code-editor\";\r\nimport { highlight, languages } from \"prismjs/components/prism-core\";\r\nimport \"prismjs/components/prism-clike\";\r\nimport \"prismjs/components/prism-javascript\";\r\nimport \"prismjs/themes/prism.css\"; //Example style, you can use another\r\nimport \"./style.css\"\r\n\r\nfunction Editor({ code, setCode, language }) {\r\n    return (\r\n        <SimpleCodeEditor\r\n            style={{\r\n                fontFamily: 'Consolas, Menlo, monospace'\r\n            }}\r\n            value={code}\r\n            onValueChange={(code) => setCode(code)}\r\n            highlight={(code) => highlight(code, languages[language])}\r\n            padding={10}\r\n            className='simple-code-editor'\r\n        />\r\n    );\r\n}\r\n\r\nexport {\r\n    Editor\r\n}","export function Header({ title }) {\r\n    return (\r\n        <div\r\n            style={{\r\n                height: 50,\r\n                // width: 'calc(100% - 10px)',\r\n                width: \"auto\",\r\n                lineHeight: \"50px\",\r\n                fontWeight: \"bold\",\r\n                borderLeft: \"5px solid #eee\",\r\n                fontSize: \"2em\",\r\n                fontFamily: \"Times\",\r\n                color: \"#333333\",\r\n                textIndent: 20,\r\n            }}\r\n        >\r\n            {title}\r\n        </div>\r\n    )\r\n}\r\n","import { Editor } from \"../components/Editor/Editor\"\r\nimport { Header } from \"../components/Header\"\r\nimport { BsPipFill, BsPlay, BsPlayFill } from \"react-icons/bs\"\r\nimport { useState } from \"react\"\r\nfunction CodeEditorPanel({ codeStr, setCodeStr, style, submit }) {\r\n    const [modified, setModified] = useState(false)\r\n\r\n    return (\r\n        <div\r\n            style={{\r\n                ...style,\r\n                minWidth: 300,\r\n                // height: 1000,\r\n                margin: 5,\r\n                display: \"flex\",\r\n                flexDirection: \"column\",\r\n            }}\r\n        >\r\n            <Header title=\"Code Editor\" />\r\n            <div\r\n                style={{\r\n                    height: \"100%\",\r\n                    marginTop: 5,\r\n                    background: \"#f6f6f6\",\r\n                    position: 'relative'\r\n                }}\r\n            >\r\n                <Editor code={codeStr} setCode={(code) => {\r\n                    setModified(true)\r\n                    setCodeStr(code)\r\n                }} language=\"js\" />\r\n                <div style={{\r\n                    position: 'absolute',\r\n                    right: 0,\r\n                    top: 0,\r\n                }}>\r\n                    {\r\n                        modified ? <BsPlayFill\r\n                            fontSize={28}\r\n                            style={{\r\n                                zIndex: 1000,\r\n                                color: '#3b5fc0',\r\n                                cursor: 'pointer',\r\n                                margin: 5,\r\n                            }}\r\n                            onClick={(e) => {\r\n                                setModified(false)\r\n                                submit()\r\n                            }} /> : <BsPlay \r\n                            style={{\r\n                                color: '#a9b0bc'\r\n                            }}\r\n                            fontSize={28} />\r\n                    }\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport { CodeEditorPanel }\r\n","import { Editor } from \"../components/Editor/Editor\"\r\nimport { Header } from \"../components/Header\"\r\n\r\nfunction DataEditorPanel({ dataStr, setDataStr, style }) {\r\n    return (\r\n        <div\r\n            style={{\r\n                ...style,\r\n                minWidth: 300,\r\n                margin: 5,\r\n                display: \"flex\",\r\n                flexDirection: \"column\",\r\n            }}\r\n        >\r\n            <Header title=\"Data Editor\" />\r\n            <div\r\n                style={{\r\n                    height: \"100%\",\r\n                    marginTop: 5,\r\n                    background: \"#f6f6f6\",\r\n                }}\r\n            >\r\n                <Editor code={dataStr} setCode={setDataStr} language=\"js\" />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport { DataEditorPanel }\r\n","function linkConditionDescription(linkConditions) {\r\n    if (!Array.isArray(linkConditions) || linkConditions.length === 0) return \"\"\r\n    // 用coverage降序排列，找出coverage最大的\r\n    const conditions = linkConditions\r\n        .slice()\r\n        .sort((a, b) => b.coverage - a.coverage)\r\n    // 暂不考虑多个condition\r\n    const condition = conditions[0]\r\n\r\n    if (condition.relation === \"common\") {\r\n        return `Two nodes are connected if their attributes <span class='description-parameter'>${\r\n            condition.attribute\r\n        }</span> are with a same value${\r\n            condition.value === \"@@any\"\r\n                ? \"\"\r\n                : `: <span class='description-parameter attribute-parameter'>${condition.value}</span>`\r\n        }.`\r\n    }\r\n    if (condition.relation === \"overlap\") {\r\n        return `Two nodes are connected if their attributes <span class='description-parameter attribute-parameter'>${\r\n            condition.attribute\r\n        }</span> have common values${\r\n            condition.value === \"@@any\"\r\n                ? \"\"\r\n                : `: <span class='description-parameter attribute-parameter'>${condition.value}</span>`\r\n        }.`\r\n    }\r\n    if (condition.relation === \"similar\") {\r\n        return `Two nodes are connected if their attributes <span class='description-parameter attribute-parameter'>${condition.attribute}</span> are close, with a difference less than: <span class='description-parameter'>${condition.value}</span>.`\r\n    }\r\n    if (condition.relation === \"same-bin\") {\r\n        return `Two nodes are connected if their attributes <span class='description-parameter attribute-parameter'>${\r\n            condition.attribute\r\n        }</span> are within the same bin${\r\n            condition.value === \"@@any\"\r\n                ? \"\"\r\n                : `: <span class='description-parameter attribute-parameter'>${condition.value}</span>`\r\n        }.`\r\n    }\r\n}\r\n\r\nexport { linkConditionDescription }\r\n","// great: it is a good channel to encode info\r\n// maybe: it is not really good enough\r\n\r\nimport {\r\n    number2ordinal,\r\n    textualizeStringArray,\r\n    textualizeVaringStringArray,\r\n} from \"./utils\"\r\n\r\nconst SUPPORTED_TYPES = new Set([\"string\", \"number\", \"undefined\", \"boolean\"])\r\n\r\n// rare: it is bad to encode info\r\nconst COMMON_STYLE_CHANNELS = new Set([\r\n    \"fill\", // great, color\r\n    \"fill-opacity\", // maybe, numerical\r\n    \"stroke\", // great, color\r\n    \"stroke-dasharray\", // rare\r\n    \"stroke-opacity\", // maybe, numerical\r\n    \"stroke-width\", // great, numerical\r\n])\r\n\r\nconst COMMON_POSITION_CHANNELS = new Map([\r\n    [\"circle\", new Set([\"cx\", \"cy\"])], // great, numerical\r\n    [\"ellipse\", new Set([\"cx\", \"cy\"])], // great, numerical\r\n    [\"line\", new Set([\"x1\", \"x2\", \"y1\", \"y2\"])], // great, numerical\r\n    [\"polygon\", new Set([\"points\"])], // great, numerical array\r\n    [\"polyline\", new Set([\"points\"])], // great, numerical array\r\n    [\"rect\", new Set([\"x\", \"y\"])], // great, rx/ry: mayby, all numerical\r\n    [\"path\", new Set([])], // great, categorical + numerical\r\n    [\"text\", new Set([\"x\", \"y\"])],\r\n])\r\n\r\nconst DEFAULT_ATTRIBUTE = {\r\n    fill: \"#000000\",\r\n    \"fill-opacity\": 1,\r\n    stroke: \"#000000\",\r\n    \"stroke-dasharray\": \"none\",\r\n    \"stroke-opacity\": 1,\r\n    rx: \"auto\",\r\n    ry: \"auto\",\r\n}\r\n\r\nconst BASIC_SVG_ELEMENTS = new Map([\r\n    [\"circle\", [\"r\"]], // great, numerical\r\n    [\"ellipse\", [\"rx\", \"ry\"]], // great, numerical\r\n    [\"line\", []], // great, numerical\r\n    [\"polygon\", []], // great, numerical array\r\n    [\"polyline\", []], // great, numerical array\r\n    [\"rect\", [\"width\", \"height\", \"rx\", \"ry\"]], // great, rx/ry: mayby, all numerical\r\n    [\"path\", []], // great, categorical + numerical\r\n    [\"text\", []],\r\n])\r\nBASIC_SVG_ELEMENTS.forEach((attributes, name) => {\r\n    attributes = attributes.concat([...COMMON_STYLE_CHANNELS])\r\n    BASIC_SVG_ELEMENTS.set(name, new Set(attributes))\r\n})\r\n\r\nconst CONNECTOR_CHAR = \"→\"\r\n\r\nconst SHARED_CHANNELS = new Set([\"rx\", \"ry\", \"cx\", \"cy\", \"points\"])\r\n\r\nconst DESCRIPTION_TEMPLATE = {\r\n    constituent: (entityType, numberOfElementsEachEntity) => {\r\n        return (_entityType, _numberOfElementsEachEntity) => {\r\n            return `Each ${_entityType} consists of ${\r\n                numberOfElementsEachEntity > 1 ? \"\" : \"only\"\r\n            } ${_numberOfElementsEachEntity} ${\r\n                numberOfElementsEachEntity > 1 ? \"different\" : \"\"\r\n            } element${numberOfElementsEachEntity > 1 ? \"s\" : \"\"}.`\r\n        }\r\n    },\r\n    onePrimitive: (numberOfLabels) => {\r\n        return (ordinal, tagName) => {\r\n            if (numberOfLabels > 1) {\r\n                return `The ${ordinal} element is a ${tagName}.`\r\n            } else {\r\n                return `It is a ${tagName}.`\r\n            }\r\n        }\r\n    },\r\n    multiPrimitive: (numberOfLabels) => {\r\n        return (ordinal, tagNames) => {\r\n            if (numberOfLabels > 1) {\r\n                return `For the ${ordinal} element, its <span class='description-parameter channel-parameter'>tagName</span> varies among multiple shapes: ${textualizeVaringStringArray(\r\n                    tagNames\r\n                )}.`\r\n            } else {\r\n                return `Its <span class='description-parameter channel-parameter'>tagName</span> varies among multiple shapes: ${textualizeVaringStringArray(\r\n                    tagNames\r\n                )}.`\r\n            }\r\n        }\r\n    },\r\n    multiPrimitiveTagName: (attrVal) => {\r\n        return (_tagName, _attrName, ..._attrVal) => {\r\n            // when the value of attrName is from attrVal.min to attrVal.max,\r\n            // or the value of attrName is attrVal[0], ..., or attrVal[-1],\r\n            _attrVal.sort()\r\n            if (\"max\" in attrVal && \"min\" in attrVal) {\r\n                return `When the value of ${_attrName} is from ${_attrVal[0]} to ${_attrVal[1]}, its <span class='description-parameter channel-parameter'>tagName</span> is changed into ${_tagName}.`\r\n            } else {\r\n                return `When the value of ${_attrName} is ${textualizeStringArray(\r\n                    _attrVal,\r\n                    \"or\"\r\n                )}, its <span class='description-parameter channel-parameter'>tagName</span> is changed into ${_tagName}.`\r\n            }\r\n        }\r\n    },\r\n    channels2attribute: (isfirstWordUpper = true) => {\r\n        return (channels, attribute) => {\r\n            return `${isfirstWordUpper ? \"I\" : \"i\"}ts ${textualizeStringArray(\r\n                channels\r\n            )} encode${\r\n                channels.length > 1 ? \"\" : \"s\"\r\n            } the attribute ${attribute}.`\r\n        }\r\n    },\r\n    samePrimitive: (sameLabelIs) => {\r\n        return (sameLabelIBegin, sameLabelIsStop, ordinal) => {\r\n            if (sameLabelIs.length > 1) {\r\n                return `For the ${sameLabelIBegin} to ${sameLabelIsStop} elements, its encoding scheme is same to the ${ordinal} element.`\r\n            } else {\r\n                return `For the ${sameLabelIBegin} element, its encoding scheme is same to the ${ordinal} element.`\r\n            }\r\n        }\r\n    },\r\n    correlationC2C: (chanName, attrName, chanVal, attrVals) => {\r\n        return `When the value of ${attrName} is ${textualizeStringArray(\r\n            attrVals.sort(),\r\n            \"or\"\r\n        )}, its ${chanName} is changed into ${chanVal}.`\r\n    },\r\n\r\n    correlationN2C: (chanName, attrName, chanVal, attrValMin, attrValMax) => {\r\n        return `When the value of ${attrName} is from ${attrValMin} to ${attrValMax}, its ${chanName} is changed into ${chanVal}.`\r\n    },\r\n    correlationN2N: (isUp) => {\r\n        return (chanName, attrName) => {\r\n            return `The greater ${attrName}, the ${\r\n                isUp ? \"greater📈\" : \"smaller📉\"\r\n            } its ${chanName}.`\r\n        }\r\n    },\r\n    correlationUndefined: (chanName, attrName) => {\r\n        return `The correlation between ${chanName} and ${attrName} can not be determined yet.`\r\n    },\r\n}\r\n\r\nconst PARAMETER_TYPE = {\r\n    entity: \"entity-parameter\",\r\n    element: \"element-parameter\",\r\n    channel: \"channel-parameter\",\r\n    attribute: \"attribute-parameter\",\r\n    value: \"value-parameter\",\r\n}\r\n\r\nexport {\r\n    PARAMETER_TYPE,\r\n    BASIC_SVG_ELEMENTS,\r\n    COMMON_STYLE_CHANNELS,\r\n    DEFAULT_ATTRIBUTE,\r\n    CONNECTOR_CHAR,\r\n    COMMON_POSITION_CHANNELS,\r\n    SHARED_CHANNELS,\r\n    DESCRIPTION_TEMPLATE,\r\n    SUPPORTED_TYPES,\r\n}\r\n","/**\r\n * @create date 2021-03-07 20:19:00\r\n * @modify date 2021-03-07 20:19:00\r\n * @desc [description]\r\n */\r\nimport {\r\n    BASIC_SVG_ELEMENTS,\r\n    DEFAULT_ATTRIBUTE,\r\n    SUPPORTED_TYPES,\r\n} from \"./global\"\r\nimport * as d3 from \"d3\"\r\n\r\nexport const NUMERICAL = \"NUMERICAL\"\r\nexport const CATEGORICAL = \"CATEGORICAL\"\r\n\r\n// parse attributes\r\nconst attrValueParser = (value) => {\r\n    // if (rgba(value).length == 4) {\r\n    //     // color\r\n    //     return rgba(value)\r\n    // } else\r\n    if (!isNaN(parseFloat(value))) {\r\n        return parseFloat(value)\r\n    } else {\r\n        return value\r\n    }\r\n}\r\n\r\nexport const dom = {\r\n    /**\r\n     * count the number of basic elements contained in the input svg\r\n     * @param {html svg element} svg\r\n     */\r\n    countBasicElementsOf: function (svg) {\r\n        const count = {}\r\n        BASIC_SVG_ELEMENTS.forEach((_, name) => {\r\n            const size = d3.select(svg).selectAll(name).size()\r\n            count[name] = size\r\n        })\r\n\r\n        /**\r\n         * get difference between two count result\r\n         * if count2 > count1, it returns positive number\r\n         * @param {Object} count1: {name: String (element name), count: Number}\r\n         * @param {Object} count2: {name: String (element name), count: Number}\r\n         */\r\n        count.prototype.minus = function (subcount) {\r\n            const diff = {}\r\n            const names = new Set([\r\n                ...Object.keys(this),\r\n                ...Object.keys(subcount),\r\n            ])\r\n            names.forEach((name) => {\r\n                diff[name] =\r\n                    (subcount[name] ? subcount[name] : 0) -\r\n                    (this[name] ? this[name] : 0)\r\n            })\r\n            return diff\r\n        }\r\n        return count\r\n    },\r\n    getComputedStyle: function (element) {\r\n        // too expensive\r\n        // const computedStyles = window.getComputedStyle(element)\r\n        const ownAttrs = element.attributes // element.getAttributeNames()\r\n        const computedStyles = Object.assign({}, DEFAULT_ATTRIBUTE)\r\n        for (let i = 0; i < ownAttrs.length; i++) {\r\n            const name = ownAttrs[i].name\r\n            const value = ownAttrs[i].value\r\n            computedStyles[name] = value // attrValueParser(value)\r\n        }\r\n\r\n        let style = {}\r\n        let BASIC_STYLES = BASIC_SVG_ELEMENTS.get(element.tagName)\r\n        if (BASIC_STYLES) {\r\n            // step1: for positions\r\n            if (element.tagName == \"circle\" || element.tagName == \"ellipse\") {\r\n                // const [cx, cy] = getComputedPosition(element, [\r\n                //     element.cx.baseVal.value,\r\n                //     element.cy.baseVal.value,\r\n                // ])\r\n                const [cx, cy] = [\r\n                    element.cx.baseVal.value,\r\n                    element.cy.baseVal.value,\r\n                ]\r\n                style = { ...style, cx, cy }\r\n            } else if (element.tagName == \"line\") {\r\n                // const [x1, y1] = getComputedPosition(element, [\r\n                //     element.x1.baseVal.value,\r\n                //     element.y1.baseVal.value,\r\n                // ])\r\n                const [x1, y1] = [\r\n                    element.x1.baseVal.value,\r\n                    element.y1.baseVal.value,\r\n                ]\r\n                const [x2, y2] = [\r\n                    element.x2.baseVal.value,\r\n                    element.y2.baseVal.value,\r\n                ]\r\n                style = { ...style, x1, y1, x2, y2 }\r\n            } else if (element.tagName == \"rect\") {\r\n                const [x, y] = [\r\n                    element.x.baseVal.value,\r\n                    element.y.baseVal.value,\r\n                ]\r\n                style = { ...style, x, y }\r\n            } else if (\r\n                element.tagName === \"polygon\" ||\r\n                element.tagName === \"polyline\"\r\n            ) {\r\n                const points = Array.from(element.points).map(({ x, y }) =>\r\n                    // getComputedPosition(element, [x, y])\r\n                    [x, y]\r\n                )\r\n                points.forEach((point, i) => {\r\n                    style[`points[${i}]['x']`] = points[0]\r\n                    style[`points[${i}]['y']`] = points[1]\r\n                })\r\n            } else if (element.tagName === \"path\") {\r\n                // TODO\r\n            } else if (element.tagName === \"text\") {\r\n                const [x, y] = [\r\n                    element.x.baseVal.value,\r\n                    element.y.baseVal.value,\r\n                ]\r\n                const textContent = element.textContent\r\n                style = { ...style, textContent, x, y }\r\n            }\r\n\r\n            // step2: for else (e.g. r, width, fill...)\r\n            BASIC_STYLES.forEach((channel) => {\r\n                style[channel] = computedStyles[channel]\r\n            })\r\n\r\n            return style\r\n\r\n            /**\r\n             * transform a position with transform matrix (transformation)\r\n             * @param {Object} style: {tagName: 'xxx', style1: 'xx', style2: 'xx', ...}\r\n             * @param {String} transformation:  e.g. \"matrix(1, 0, 0, 1, 10, 10)\"\r\n             */\r\n            function getComputedPosition(element, position) {\r\n                //! compute position, assume only translate, no rotate, no scale\r\n                let thisNode = element\r\n                let [x, y] = position\r\n                // do {\r\n                //     if (thisNode.transform.baseVal.length) {\r\n                //         const matrix = thisNode.transform.baseVal[0].matrix\r\n                //         x += matrix.e\r\n                //         y += matrix.f\r\n                //     }\r\n                //     thisNode = thisNode.parentNode\r\n                // } while (thisNode.tagName !== \"svg\")\r\n                return [x, y]\r\n            }\r\n        }\r\n    },\r\n}\r\n\r\nexport const object = {\r\n    isEqual: function (a, b) {\r\n        //! only object, number, array, string are supported\r\n        if (typeof a !== typeof b) {\r\n            return false\r\n        }\r\n\r\n        if (\r\n            typeof a == \"string\" ||\r\n            typeof a == \"number\" ||\r\n            typeof a == \"undefined\" ||\r\n            typeof a == \"boolean\"\r\n        ) {\r\n            return a == b\r\n        } else if (typeof a == \"object\") {\r\n            if (Array.isArray(a) && Array.isArray(b)) {\r\n                return (\r\n                    a.length == b.length &&\r\n                    a.every((_, i) => this.isEqual(a[i], b[i]))\r\n                )\r\n            } else if (!Array.isArray(a) && !Array.isArray(b)) {\r\n                // Create arrays of property names\r\n                const aProps = Object.getOwnPropertyNames(a)\r\n                const bProps = Object.getOwnPropertyNames(b)\r\n\r\n                // If number of properties is different,\r\n                // objects are not equivalent\r\n                if (aProps.length != bProps.length) {\r\n                    return false\r\n                }\r\n\r\n                for (var i = 0; i < aProps.length; i++) {\r\n                    var propName = aProps[i]\r\n\r\n                    // If values of same property are not equal,\r\n                    // objects are not equivalent\r\n                    if (!this.isEqual(a[propName], b[propName])) {\r\n                        return false\r\n                    }\r\n                }\r\n\r\n                // If we made it this far, objects\r\n                // are considered equivalent\r\n                return true\r\n            } else {\r\n                return false\r\n            }\r\n        } else {\r\n            console.error(`Not supported type: ${typeof a}`)\r\n        }\r\n    },\r\n    /**\r\n     * Deep Copy an object\r\n     * @param {JSON format data} obj\r\n     */\r\n    deepcopy: function (obj) {\r\n        return JSON.parse(JSON.stringify(obj))\r\n    },\r\n    dfs: function (obj, callback) {\r\n        const stack = []\r\n        let index = obj\r\n        while (true) {\r\n            if (index) {\r\n                callback(index)\r\n                if (index.children && index.children.length) {\r\n                    let children = Array.from(index.children)\r\n                    const indexNext = children.pop()\r\n                    children.forEach((child) => stack.push(child))\r\n                    index = indexNext\r\n                } else {\r\n                    index = stack.pop()\r\n                }\r\n            } else {\r\n                break\r\n            }\r\n        }\r\n    },\r\n}\r\n\r\nexport const NoLinDiagram = {\r\n    /**\r\n     * get attributes of nodes and links\r\n     * @param {standard node-link data format} data\r\n     * @returns {nodes: node attributes array, links: link attributes array}\r\n     */\r\n    getAttributesOf: function (data) {\r\n        const nodeAttrs = new Map()\r\n        const linkAttrs = new Map()\r\n        const CONNECTOR = \"@\"\r\n        data.nodes.forEach((node) => {\r\n            for (let attr in node) {\r\n                if (typeof node[attr] == \"object\") {\r\n                    // array or obj\r\n                    Object.entries(node[attr]).forEach(([i, d]) => {\r\n                        const key = `${attr}${CONNECTOR}${i}`\r\n                        if (nodeAttrs.has(key)) {\r\n                            nodeAttrs.get(key).push(node[attr][i])\r\n                        } else {\r\n                            nodeAttrs.set(key, [node[attr][i]])\r\n                        }\r\n                    })\r\n                } else if (SUPPORTED_TYPES.has(typeof node[attr]) >= 0) {\r\n                    if (nodeAttrs.has(attr)) {\r\n                        nodeAttrs.get(attr).push(node[attr])\r\n                    } else {\r\n                        nodeAttrs.set(attr, [node[attr]])\r\n                    }\r\n                }\r\n            }\r\n        })\r\n\r\n        data.links.forEach((link) => {\r\n            for (let attr in link) {\r\n                if (linkAttrs.has(attr)) {\r\n                    linkAttrs.get(attr).push(link[attr])\r\n                } else {\r\n                    linkAttrs.set(attr, [link[attr]])\r\n                }\r\n            }\r\n        })\r\n\r\n        // delete unique identities\r\n        nodeAttrs.delete(\"id\")\r\n        linkAttrs.delete(\"source\")\r\n        linkAttrs.delete(\"target\")\r\n\r\n        nodeAttrs.forEach((value, name) => {\r\n            nodeAttrs.set(name, computeAttributeTypeAndRange(value))\r\n        })\r\n        linkAttrs.forEach((value, name) => {\r\n            linkAttrs.set(name, computeAttributeTypeAndRange(value))\r\n        })\r\n\r\n        return {\r\n            nodes: nodeAttrs,\r\n            links: linkAttrs,\r\n        }\r\n\r\n        /**\r\n         *\r\n         * @param {*} data\r\n         * @param {*} NUMERICAL_LENGTH_THRESHOLD\r\n         */\r\n        function computeAttributeTypeAndRange(\r\n            data,\r\n            NUMERICAL_LENGTH_THRESHOLD = 10\r\n        ) {\r\n            let range = []\r\n            let isAllNumerical = true\r\n            let type = NUMERICAL\r\n            data.forEach((value) => {\r\n                range.push(value)\r\n                if (typeof value !== \"number\") {\r\n                    isAllNumerical = false\r\n                }\r\n            })\r\n            if (!isAllNumerical || range.length <= NUMERICAL_LENGTH_THRESHOLD) {\r\n                type = CATEGORICAL\r\n            }\r\n            return {\r\n                type,\r\n                range,\r\n            }\r\n        }\r\n    },\r\n}\r\n\r\n/**\r\n * returns a NLized string, e.g., ['a', 'b'] => 'a and b', ['a', 'b', 'c'] => 'a, b, and c'\r\n * @param {String[]} array\r\n * @param {String} connector\r\n */\r\nexport function textualizeVaringStringArray(array, connector = \"and\") {\r\n    let str = \"\"\r\n    if (array.length == 1) {\r\n        return array[0]\r\n    }\r\n    if (array.length == 2) {\r\n        // return array.join(` ${connector} `)\r\n        return `from ${array[0]} to ${array[1]}`\r\n    }\r\n    array.forEach((item, i) => {\r\n        str += item\r\n        if (i < array.length - 1) {\r\n            if (i == array.length - 2) {\r\n                str += `, ${connector} `\r\n            } else {\r\n                str += \", \"\r\n            }\r\n        }\r\n    })\r\n    return str\r\n}\r\n\r\n/**\r\n * returns a NLized string, e.g., ['a', 'b'] => 'a and b', ['a', 'b', 'c'] => 'a, b, and c'\r\n * @param {String[]} array\r\n * @param {String} connector\r\n */\r\nexport function textualizeStringArray(array, connector = \"and\") {\r\n    let str = \"\"\r\n    if (array.length == 1) {\r\n        return array[0]\r\n    }\r\n    if (array.length == 2) {\r\n        return array.join(` ${connector} `)\r\n    }\r\n    array.forEach((item, i) => {\r\n        str += item\r\n        if (i < array.length - 1) {\r\n            if (i == array.length - 2) {\r\n                str += `, ${connector} `\r\n            } else {\r\n                str += \", \"\r\n            }\r\n        }\r\n    })\r\n    return str\r\n}\r\n\r\nexport function number2ordinal(number) {\r\n    var special = [\r\n        \"zeroth\",\r\n        \"first\",\r\n        \"second\",\r\n        \"third\",\r\n        \"fourth\",\r\n        \"fifth\",\r\n        \"sixth\",\r\n        \"seventh\",\r\n        \"eighth\",\r\n        \"ninth\",\r\n        \"tenth\",\r\n        \"eleventh\",\r\n        \"twelfth\",\r\n        \"thirteenth\",\r\n        \"fourteenth\",\r\n        \"fifteenth\",\r\n        \"sixteenth\",\r\n        \"seventeenth\",\r\n        \"eighteenth\",\r\n        \"nineteenth\",\r\n    ]\r\n    var deca = [\r\n        \"twent\",\r\n        \"thirt\",\r\n        \"fort\",\r\n        \"fift\",\r\n        \"sixt\",\r\n        \"sevent\",\r\n        \"eight\",\r\n        \"ninet\",\r\n    ]\r\n\r\n    function stringifyNumber(n) {\r\n        if (n < 20) return special[n]\r\n        if (n % 10 === 0) return deca[Math.floor(n / 10) - 2] + \"ieth\"\r\n        return deca[Math.floor(n / 10) - 2] + \"y-\" + special[n % 10]\r\n    }\r\n\r\n    // TEST LOOP SHOWING RESULTS\r\n    return stringifyNumber(number)\r\n}\r\n\r\nexport function swtichFirstWord(str) {\r\n    if (str[0].toUpperCase() == str[0]) {\r\n        return str[0].toLowerCase() + str.substring(1)\r\n    } else {\r\n        return str[0].toUpperCase() + str.substring(1)\r\n    }\r\n}\r\n\r\nexport function svgToArray(svg) {\r\n    const arr = []\r\n    object.dfs(svg, (ele) => {\r\n        if (BASIC_SVG_ELEMENTS.has(ele.tagName)) {\r\n            arr.push(ele)\r\n        }\r\n    })\r\n    return arr\r\n}\r\n","import { useEffect, useRef, useState } from \"react\"\r\nimport { linkConditionDescription } from \"../descriptions/descriptions\"\r\nimport * as d3 from \"d3\"\r\nimport { Header } from \"../components/Header\"\r\nimport \"./visualizationPanel.css\"\r\nimport { object } from \"../descriptor/utils\"\r\n\r\nconst entityType2dataKey = {\r\n    node: \"nodes\",\r\n    link: \"links\",\r\n}\r\nconst TOOLTIP_WIDTH = 400\r\n\r\nconst DEFAULT_ELEMENT_WIDTH = 50\r\n\r\nfunction isFloat(n) {\r\n    return Number(n) === n && n % 1 !== 0\r\n}\r\n\r\nfunction processFloat(x) {\r\n    if (isFloat(x)) {\r\n        return x.toFixed(2)\r\n    }\r\n    return x\r\n}\r\n\r\nfunction getEncodings(label2attr2diff, label, element) {\r\n    const res = {}\r\n    Object.keys(label2attr2diff).forEach((l) => {\r\n        if (label && label in label2attr2diff && label != l) return\r\n        const attrs = label2attr2diff[l]\r\n        Object.keys(attrs).forEach((attr) => {\r\n            if (\"style\" in attrs[attr]) {\r\n                const styles = Object.keys(attrs[attr].style)\r\n                res[attr] = styles\r\n                    .map((style) => {\r\n                        // TODO: 处理cx.circle的情况\r\n                        if (style.indexOf(\".\")) {\r\n                            style = style.split(\".\")[0]\r\n                        }\r\n                        if (style === \"cx\" && !element.hasAttribute(style)) {\r\n                            return \"x\"\r\n                        } else if (\r\n                            style === \"cy\" &&\r\n                            !element.hasAttribute(style)\r\n                        ) {\r\n                            return \"y\"\r\n                        }\r\n                        return style\r\n                    })\r\n                    .filter((style) => {\r\n                        // TODO: 对于rect的特判\r\n                        if (\r\n                            style === \"x\" ||\r\n                            style === \"y\" ||\r\n                            style === \"textContent\"\r\n                        ) {\r\n                            return true\r\n                        }\r\n                        return element.hasAttribute(style)\r\n                    })\r\n            } else if (\"tagName\" in attrs[attr]) {\r\n                res[attr] = [\"tagName\"]\r\n            } else {\r\n                // TODO: 其它情况\r\n            }\r\n        })\r\n    })\r\n\r\n    return res\r\n}\r\n\r\nfunction getLayoutEncodings(layoutDescriptions) {\r\n    const res = {\r\n        isTopo: false,\r\n        encodings: [],\r\n        elements: new Set(),\r\n    }\r\n    for (const desc of layoutDescriptions) {\r\n        if (desc.parameters.length === 0) {\r\n            res.isTopo = true\r\n            desc.elements.forEach((el) => {\r\n                res.elements.add(el)\r\n            })\r\n        } else {\r\n            const encoding = {\r\n                key: desc.parameters[0].value,\r\n                value: desc.parameters[1].value,\r\n            }\r\n            res.encodings.push(encoding)\r\n            // TODO: always single children?\r\n            desc.children[0].elements.forEach((el) => {\r\n                res.elements.add(el)\r\n            })\r\n        }\r\n    }\r\n\r\n    return res\r\n}\r\n\r\nfunction VisualizationGivenDataPanel({\r\n    dataFolder,\r\n    style,\r\n    svg,\r\n    dataStr,\r\n    elementInfo,\r\n    layoutDescriptions,\r\n    label2Encodings,\r\n    linkConditions,\r\n    entityElementsGroups,\r\n    visibleElements,\r\n    nodeMeanings,\r\n}) {\r\n    const ref = useRef()\r\n\r\n    const [info, setInfo] = useState(null)\r\n    const [element, setElement] = useState(null)\r\n    const [encodings, setEncodings] = useState(null)\r\n    const [tooltipVisible, setToolTipVisible] = useState(false)\r\n    const [tooltipTop, setToolTipTop] = useState(0)\r\n    const [tooltipLeft, setToolTipLeft] = useState(0)\r\n    const [data, setData] = useState(null)\r\n\r\n    useEffect(() => {\r\n        if (!svg || !dataStr) return\r\n        const data = JSON.parse(dataStr)\r\n        setData(data)\r\n\r\n        ref.current.innerHTML = \"\"\r\n        if (svg) {\r\n            ref.current.appendChild(svg)\r\n            d3.select(svg)\r\n                .on(\"mouseover\", function (e) {\r\n                    const el = e.target\r\n                    if (el.hasAttribute(\"idx\")) {\r\n                        const idx = parseInt(el.getAttribute(\"idx\"))\r\n                        const info = elementInfo[idx]\r\n                        if (info) {\r\n                            setInfo(info)\r\n                            setElement(el)\r\n                            setEncodings(\r\n                                getEncodings(\r\n                                    label2Encodings[info.entityType],\r\n                                    info.label,\r\n                                    el\r\n                                )\r\n                            )\r\n                            setToolTipVisible(true)\r\n                        }\r\n\r\n                        visibleElements.forEach((e) => {\r\n                            d3.select(e).attr(\"opacity\", 0.1)\r\n                        })\r\n                        d3.select(el).attr(\"opacity\", 1)\r\n\r\n                        const d = d3.select(el).datum()\r\n                        if (d?.descriptionElements) {\r\n                            d3.selectAll(\"p.description-term\").style(\r\n                                \"background-color\",\r\n                                \"#fff\"\r\n                            )\r\n                            d3.selectAll(\r\n                                d.descriptionElements.filter(\r\n                                    (element) => element\r\n                                )\r\n                            ).style(\"background-color\", \"#e9e9e9\")\r\n                        }\r\n                    }\r\n                })\r\n                .on(\"mousemove\", function (e) {\r\n                    const el = e.target\r\n                    if (el.hasAttribute(\"idx\")) {\r\n                        const [x, y] = d3.pointer(e, d3.select(document.body))\r\n                        // setToolTipLeft(x - TOOLTIP_WIDTH / 2);\r\n                        // setToolTipTop(y - TOOLTIP_HEIGHT + 50);\r\n                        setToolTipLeft(x)\r\n                        setToolTipTop(y)\r\n                    }\r\n                })\r\n                .on(\"mouseout\", function (e) {\r\n                    const el = e.target\r\n                    if (el.hasAttribute(\"idx\")) {\r\n                        setToolTipVisible(false)\r\n                    }\r\n                    visibleElements.forEach((e) => {\r\n                        d3.select(e).attr(\"opacity\", 1)\r\n                    })\r\n                    d3.selectAll(\"p.description-term\").style(\r\n                        \"background-color\",\r\n                        \"#fff\"\r\n                    )\r\n                })\r\n        }\r\n    }, [svg, elementInfo, dataStr, label2Encodings, visibleElements])\r\n\r\n    return (\r\n        <div style={style}>\r\n            <Header title=\"Node-Link Diagram\" />\r\n            <div\r\n                style={{\r\n                    marginTop: 10,\r\n                    // borderLeft: \"1px solid gray\",\r\n                }}\r\n                ref={ref}\r\n            >\r\n                {/* <Tooltip\r\n                    dataFolder={dataFolder}\r\n                    data={data}\r\n                    info={info}\r\n                    layoutDescriptions={layoutDescriptions}\r\n                    element={element}\r\n                    encodings={encodings}\r\n                    visible={tooltipVisible}\r\n                    top={tooltipTop}\r\n                    left={tooltipLeft}\r\n                    linkConditions={linkConditions}\r\n                    entityElementsGroups={entityElementsGroups}\r\n                    nodeMeanings={nodeMeanings}\r\n                /> */}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction Tooltip({\r\n    dataFolder,\r\n    data,\r\n    info,\r\n    layoutDescriptions,\r\n    element,\r\n    visible,\r\n    top,\r\n    left,\r\n    encodings,\r\n    linkConditions,\r\n    entityElementsGroups,\r\n    nodeMeanings,\r\n}) {\r\n    useEffect(() => {\r\n        const tooltip = document.getElementById(\"vis-tooltip\")\r\n        if (tooltip) {\r\n            const { top } = tooltip.getBoundingClientRect()\r\n            if (top < 40) {\r\n                tooltip.style.transform = `translate(-50%, 50px)`\r\n            }\r\n        }\r\n    })\r\n\r\n    if (!info || !visible) return null\r\n    const term = data[entityType2dataKey[info.entityType]][info.entityIndex]\r\n    const excludeKeys = new Set([\"id\", \"source\", \"target\"])\r\n\r\n    // let newElement = null\r\n    // if (element) {\r\n    //     newElement = element.cloneNode(true)\r\n    //     if (newElement.tagName === \"circle\") {\r\n    //         const r = newElement.getAttribute(\"r\")\r\n    //         newElement.setAttribute(\"cx\", 0)\r\n    //         newElement.setAttribute(\"cy\", 0)\r\n    //     } else if (newElement.tagName === \"rect\") {\r\n    //         const width = newElement.getAttribute(\"width\")\r\n    //         const height = newElement.getAttribute(\"height\")\r\n    //         newElement.setAttribute(\"x\", -width / 2)\r\n    //         newElement.setAttribute(\"y\", -height / 2)\r\n    //     } else {\r\n    //         // TODO: 其它的暂不支持\r\n    //         newElement = null\r\n    //     }\r\n    // }\r\n\r\n    const maxBBox = entityElementsGroups[info.entityType].maxBBox\r\n    const LEGENDS_ELEMENT_WIDTH = Math.min(\r\n        DEFAULT_ELEMENT_WIDTH,\r\n        Math.max(maxBBox.width, maxBBox.height)\r\n    )\r\n    const k = LEGENDS_ELEMENT_WIDTH / Math.max(maxBBox.width, maxBBox.height)\r\n    const bbox = entityElementsGroups[info.entityType][info.entityIndex].bbox\r\n    const newElement =\r\n        entityElementsGroups[info.entityType][info.entityIndex].group.cloneNode(\r\n            true\r\n        )\r\n    d3.select(newElement).attr(\r\n        \"transform\",\r\n        `scale(${k})translate(-${bbox.x + bbox.width / 2}, -${\r\n            bbox.y + bbox.height / 2\r\n        })`\r\n    )\r\n    const idx = parseInt(element.getAttribute(\"idx\"))\r\n    if (!isNaN(idx)) {\r\n        object.dfs(newElement, (el) => {\r\n            const _idx = parseInt(el.getAttribute(\"idx\"))\r\n            if (!isNaN(_idx) && _idx !== idx) {\r\n                el.setAttribute(\"opacity\", \"20%\")\r\n            }\r\n        })\r\n    }\r\n\r\n    const linkDescription = linkConditionDescription(linkConditions)\r\n\r\n    const layoutEncodings = getLayoutEncodings(layoutDescriptions)\r\n\r\n    return (\r\n        <div\r\n            id=\"vis-tooltip\"\r\n            className=\"svg-tooltip\"\r\n            style={{\r\n                padding: 10,\r\n                position: \"absolute\",\r\n                transform: `translate(-50%)`,\r\n                width: `${TOOLTIP_WIDTH}px`,\r\n                left: left - TOOLTIP_WIDTH,\r\n                top: top,\r\n                visibility: visible,\r\n                fontFamily: \"Consolas, Menlo, monospace\",\r\n            }}\r\n        >\r\n            {/* {JSON.stringify(info)} */}\r\n            <div\r\n                style={{\r\n                    fontSize: \"24px\",\r\n                    fontWeight: \"bolder\",\r\n                    fontFamily: \"Times\",\r\n                    textTransform: \"capitalize\",\r\n                }}\r\n            >\r\n                {info.entityType} Meanings\r\n            </div>\r\n            {info.entityType === \"link\" ? (\r\n                <div\r\n                    dangerouslySetInnerHTML={{\r\n                        __html: `<span class=\"description-parameter entity-parameter\">Link</span>: ${linkDescription}`,\r\n                    }}\r\n                ></div>\r\n            ) : (\r\n                <div\r\n                    dangerouslySetInnerHTML={{\r\n                        __html: `<span class=\"description-parameter entity-parameter\">Node</span>: ${nodeMeanings}.`,\r\n                    }}\r\n                ></div>\r\n            )}\r\n            <div\r\n                style={{\r\n                    fontSize: \"24px\",\r\n                    fontWeight: \"bolder\",\r\n                    fontFamily: \"Times\",\r\n                }}\r\n            >\r\n                Attributes\r\n            </div>\r\n            {Object.keys(term).map((k) => {\r\n                if (excludeKeys.has(k)) return null\r\n                const val = term[k]\r\n                return (\r\n                    <div key={k}>\r\n                        <span className=\"tooltip-attr\">{k}</span>:\r\n                        {Array.isArray(val) ? (\r\n                            <span>[{val.join(\",\")}]</span>\r\n                        ) : typeof val === \"object\" ? (\r\n                            <div\r\n                                style={{\r\n                                    marginLeft: 10,\r\n                                }}\r\n                            >\r\n                                {Object.keys(val).map((k) => {\r\n                                    return (\r\n                                        <div key={k}>\r\n                                            <span className=\"tooltip-attr\">\r\n                                                {k}\r\n                                            </span>\r\n                                            : {val[k]}\r\n                                        </div>\r\n                                    )\r\n                                })}\r\n                            </div>\r\n                        ) : (\r\n                            ` ${isFloat(val) ? val.toFixed(2) : val}`\r\n                        )}\r\n                    </div>\r\n                )\r\n            })}\r\n\r\n            <div\r\n                style={{\r\n                    fontSize: \"24px\",\r\n                    fontWeight: \"bolder\",\r\n                    fontFamily: \"Times\",\r\n                }}\r\n            >\r\n                Encodings\r\n            </div>\r\n            <div>\r\n                {encodings &&\r\n                    Object.keys(encodings).map((attr, k) => {\r\n                        return (\r\n                            <div key={k}>\r\n                                {\r\n                                    // 暂时不要了\r\n                                    // false &&\r\n                                    newElement && (\r\n                                        <svg\r\n                                            width={LEGENDS_ELEMENT_WIDTH}\r\n                                            height={LEGENDS_ELEMENT_WIDTH}\r\n                                            style={{\r\n                                                verticalAlign: \"middle\",\r\n                                            }}\r\n                                            viewBox={`-${\r\n                                                LEGENDS_ELEMENT_WIDTH / 2\r\n                                            } -${\r\n                                                LEGENDS_ELEMENT_WIDTH / 2\r\n                                            } ${LEGENDS_ELEMENT_WIDTH} ${LEGENDS_ELEMENT_WIDTH}`}\r\n                                            dangerouslySetInnerHTML={{\r\n                                                __html: new XMLSerializer().serializeToString(\r\n                                                    newElement\r\n                                                ),\r\n                                            }}\r\n                                        ></svg>\r\n                                    )\r\n                                }\r\n\r\n                                {encodings[attr].map((style) => {\r\n                                    return (\r\n                                        <span className=\"tooltip-attr\">\r\n                                            {style}\r\n                                        </span>\r\n                                    )\r\n                                })}\r\n                                <span> → </span>\r\n                                <span className=\"tooltip-attr\">\r\n                                    {attr.indexOf(\"@\") !== -1\r\n                                        ? `${attr.split(\"@\")[0]}[${\r\n                                              attr.split(\"@\")[1]\r\n                                          }]`\r\n                                        : attr}\r\n                                </span>\r\n                                <span>: </span>\r\n                                {\r\n                                    // TODO: 可能考虑不全面\r\n                                    processFloat(\r\n                                        attr.indexOf(\"@\") !== -1\r\n                                            ? term[attr.split(\"@\")[0]][\r\n                                                  attr.split(\"@\")[1]\r\n                                              ]\r\n                                            : term[attr]\r\n                                    )\r\n                                }\r\n                            </div>\r\n                        )\r\n                    })}\r\n            </div>\r\n            {layoutEncodings.elements.has(element) && (\r\n                <div>\r\n                    <div\r\n                        style={{\r\n                            fontSize: \"24px\",\r\n                            fontWeight: \"bolder\",\r\n                            fontFamily: \"Times\",\r\n                        }}\r\n                    >\r\n                        Layout\r\n                    </div>\r\n                    <div>\r\n                        {layoutEncodings.isTopo && (\r\n                            <p>\r\n                                The layout is a topology-based layout. The\r\n                                farther the geodesic distance (the length of the\r\n                                shortest path) between two nodes, the farther\r\n                                the Euclidean distance between them.\r\n                            </p>\r\n                        )}\r\n                        {layoutEncodings.encodings.map((encoding) => {\r\n                            return (\r\n                                <div>\r\n                                    <img\r\n                                        alt={`data/${dataFolder}/layout-indicator.svg`}\r\n                                        width={35}\r\n                                        height={35}\r\n                                        src={`data/${dataFolder}/layout-indicator.svg`}\r\n                                    ></img>\r\n                                    <span className=\"tooltip-attr\">\r\n                                        {encoding.key}\r\n                                    </span>\r\n                                    <span> → </span>\r\n                                    {encoding.value.map((attr) => {\r\n                                        return (\r\n                                            <span className=\"tooltip-attr\">\r\n                                                {attr.indexOf(\"@\") !== -1\r\n                                                    ? `${attr.split(\"@\")[0]}[${\r\n                                                          attr.split(\"@\")[1]\r\n                                                      }]`\r\n                                                    : attr}\r\n                                            </span>\r\n                                        )\r\n                                    })}\r\n                                </div>\r\n                            )\r\n                        })}\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport { VisualizationGivenDataPanel }\r\n","export function Loader({ style = {}, state = \"\" }) {\r\n    return (\r\n        <div\r\n            style={{\r\n                color: \"\",\r\n                fontFamily: \"Times\",\r\n                ...style,\r\n            }}\r\n        >\r\n            {state}&nbsp;&nbsp;\r\n            <div\r\n                className=\"loader-inner ball-pulse\"\r\n                style={{\r\n                    display: \"inline-block\",\r\n                }}\r\n            >\r\n                <div\r\n                    style={{\r\n                        background: \"black\",\r\n                    }}\r\n                ></div>\r\n                <div\r\n                    style={{\r\n                        background: \"black\",\r\n                    }}\r\n                ></div>\r\n                <div\r\n                    style={{\r\n                        background: \"black\",\r\n                    }}\r\n                ></div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import colorRGBA from 'color-rgba'\r\n\r\nconst colorTable = [{ \"name\": \"black\", \"vec\": [0, 0, 0] }, { \"name\": \"silver\", \"vec\": [192, 192, 192] }, { \"name\": \"grey\", \"vec\": [128, 128, 128] }, { \"name\": \"white\", \"vec\": [255, 255, 255] }, { \"name\": \"maroon\", \"vec\": [128, 0, 0] }, { \"name\": \"red\", \"vec\": [255, 0, 0] }, { \"name\": \"purple\", \"vec\": [128, 0, 128] }, { \"name\": \"fuchsia\", \"vec\": [255, 0, 255] }, { \"name\": \"green\", \"vec\": [0, 128, 0] }, { \"name\": \"lime\", \"vec\": [0, 255, 0] }, { \"name\": \"olive\", \"vec\": [128, 128, 0] }, { \"name\": \"yellow\", \"vec\": [255, 255, 0] }, { \"name\": \"navy\", \"vec\": [0, 0, 128] }, { \"name\": \"blue\", \"vec\": [0, 0, 255] }, { \"name\": \"teal\", \"vec\": [0, 128, 128] }, { \"name\": \"aqua\", \"vec\": [0, 255, 255] }, { \"name\": \"orange\", \"vec\": [255, 165, 0] }, { \"name\": \"aliceblue\", \"vec\": [240, 248, 255] }, { \"name\": \"antiquewhite\", \"vec\": [250, 235, 215] }, { \"name\": \"aquamarine\", \"vec\": [127, 255, 212] }, { \"name\": \"azure\", \"vec\": [240, 255, 255] }, { \"name\": \"beige\", \"vec\": [245, 245, 220] }, { \"name\": \"blanchedalmond\", \"vec\": [255, 228, 196] }, { \"name\": \"blueviolet\", \"vec\": [138, 43, 226] }, { \"name\": \"brown\", \"vec\": [165, 42, 42] }, { \"name\": \"burlywood\", \"vec\": [222, 184, 135] }, { \"name\": \"cadetblue\", \"vec\": [95, 158, 160] }, { \"name\": \"chartreuse\", \"vec\": [127, 255, 0] }, { \"name\": \"chocolate\", \"vec\": [210, 105, 30] }, { \"name\": \"coral\", \"vec\": [255, 127, 80] }, { \"name\": \"cornflowerblue\", \"vec\": [100, 149, 237] }, { \"name\": \"cornsilk\", \"vec\": [255, 248, 220] }, { \"name\": \"crimson\", \"vec\": [220, 20, 60] }, { \"name\": \"darkblue\", \"vec\": [0, 0, 139] }, { \"name\": \"darkcyan\", \"vec\": [0, 139, 139] }, { \"name\": \"darkgoldenrod\", \"vec\": [184, 134, 11] }, { \"name\": \"darkgrey\", \"vec\": [169, 169, 169] }, { \"name\": \"darkgreen\", \"vec\": [0, 100, 0] }, { \"name\": \"darkkhaki\", \"vec\": [189, 183, 107] }, { \"name\": \"darkmagenta\", \"vec\": [139, 0, 139] }, { \"name\": \"darkolivegreen\", \"vec\": [85, 107, 47] }, { \"name\": \"darkorange\", \"vec\": [255, 140, 0] }, { \"name\": \"darkorchid\", \"vec\": [153, 50, 204] }, { \"name\": \"darkred\", \"vec\": [139, 0, 0] }, { \"name\": \"darksalmon\", \"vec\": [233, 150, 122] }, { \"name\": \"darkseagreen\", \"vec\": [143, 188, 143] }, { \"name\": \"darkslateblue\", \"vec\": [72, 61, 139] }, { \"name\": \"darkslategrey\", \"vec\": [47, 79, 79] }, { \"name\": \"darkturquoise\", \"vec\": [0, 206, 209] }, { \"name\": \"darkviolet\", \"vec\": [148, 0, 211] }, { \"name\": \"deeppink\", \"vec\": [255, 20, 147] }, { \"name\": \"deepskyblue\", \"vec\": [0, 191, 255] }, { \"name\": \"dimgrey\", \"vec\": [105, 105, 105] }, { \"name\": \"dodgerblue\", \"vec\": [30, 144, 255] }, { \"name\": \"firebrick\", \"vec\": [178, 34, 34] }, { \"name\": \"floralwhite\", \"vec\": [255, 250, 240] }, { \"name\": \"forestgreen\", \"vec\": [34, 139, 34] }, { \"name\": \"gainsboro\", \"vec\": [220, 220, 220] }, { \"name\": \"ghostwhite\", \"vec\": [248, 248, 255] }, { \"name\": \"gold\", \"vec\": [255, 215, 0] }, { \"name\": \"goldenrod\", \"vec\": [218, 165, 32] }, { \"name\": \"greenyellow\", \"vec\": [173, 255, 47] }, { \"name\": \"honeydew\", \"vec\": [240, 255, 240] }, { \"name\": \"hotpink\", \"vec\": [255, 105, 180] }, { \"name\": \"indianred\", \"vec\": [205, 92, 92] }, { \"name\": \"indigo\", \"vec\": [75, 0, 130] }, { \"name\": \"ivory\", \"vec\": [255, 255, 240] }, { \"name\": \"khaki\", \"vec\": [240, 230, 140] }, { \"name\": \"lavender\", \"vec\": [230, 230, 250] }, { \"name\": \"lavenderblush\", \"vec\": [255, 240, 245] }, { \"name\": \"lawngreen\", \"vec\": [124, 252, 0] }, { \"name\": \"lemonchiffon\", \"vec\": [255, 250, 205] }, { \"name\": \"lightblue\", \"vec\": [173, 216, 230] }, { \"name\": \"lightcoral\", \"vec\": [240, 128, 128] }, { \"name\": \"lightcyan\", \"vec\": [224, 255, 255] }, { \"name\": \"lightgoldenrodyellow\", \"vec\": [250, 250, 210] }, { \"name\": \"lightgrey\", \"vec\": [211, 211, 211] }, { \"name\": \"lightgreen\", \"vec\": [144, 238, 144] }, { \"name\": \"lightpink\", \"vec\": [255, 182, 193] }, { \"name\": \"lightsalmon\", \"vec\": [255, 160, 122] }, { \"name\": \"lightseagreen\", \"vec\": [32, 178, 170] }, { \"name\": \"lightskyblue\", \"vec\": [135, 206, 250] }, { \"name\": \"lightslategrey\", \"vec\": [119, 136, 153] }, { \"name\": \"lightsteelblue\", \"vec\": [176, 196, 222] }, { \"name\": \"lightyellow\", \"vec\": [255, 255, 224] }, { \"name\": \"limegreen\", \"vec\": [50, 205, 50] }, { \"name\": \"linen\", \"vec\": [250, 240, 230] }, { \"name\": \"mediumaquamarine\", \"vec\": [102, 205, 170] }, { \"name\": \"mediumblue\", \"vec\": [0, 0, 205] }, { \"name\": \"mediumorchid\", \"vec\": [186, 85, 211] }, { \"name\": \"mediumpurple\", \"vec\": [147, 112, 219] }, { \"name\": \"mediumseagreen\", \"vec\": [60, 179, 113] }, { \"name\": \"mediumslateblue\", \"vec\": [123, 104, 238] }, { \"name\": \"mediumspringgreen\", \"vec\": [0, 250, 154] }, { \"name\": \"mediumturquoise\", \"vec\": [72, 209, 204] }, { \"name\": \"mediumvioletred\", \"vec\": [199, 21, 133] }, { \"name\": \"midnightblue\", \"vec\": [25, 25, 112] }, { \"name\": \"mintcream\", \"vec\": [245, 255, 250] }, { \"name\": \"mistyrose\", \"vec\": [255, 228, 225] }, { \"name\": \"moccasin\", \"vec\": [255, 228, 181] }, { \"name\": \"navajowhite\", \"vec\": [255, 222, 173] }, { \"name\": \"oldlace\", \"vec\": [253, 245, 230] }, { \"name\": \"olivedrab\", \"vec\": [107, 142, 35] }, { \"name\": \"orangered\", \"vec\": [255, 69, 0] }, { \"name\": \"orchid\", \"vec\": [218, 112, 214] }, { \"name\": \"palegoldenrod\", \"vec\": [238, 232, 170] }, { \"name\": \"palegreen\", \"vec\": [152, 251, 152] }, { \"name\": \"paleturquoise\", \"vec\": [175, 238, 238] }, { \"name\": \"palevioletred\", \"vec\": [219, 112, 147] }, { \"name\": \"papayawhip\", \"vec\": [255, 239, 213] }, { \"name\": \"peachpuff\", \"vec\": [255, 218, 185] }, { \"name\": \"peru\", \"vec\": [205, 133, 63] }, { \"name\": \"pink\", \"vec\": [255, 192, 203] }, { \"name\": \"plum\", \"vec\": [221, 160, 221] }, { \"name\": \"powderblue\", \"vec\": [176, 224, 230] }, { \"name\": \"rosybrown\", \"vec\": [188, 143, 143] }, { \"name\": \"royalblue\", \"vec\": [65, 105, 225] }, { \"name\": \"saddlebrown\", \"vec\": [139, 69, 19] }, { \"name\": \"salmon\", \"vec\": [250, 128, 114] }, { \"name\": \"sandybrown\", \"vec\": [244, 164, 96] }, { \"name\": \"seagreen\", \"vec\": [46, 139, 87] }, { \"name\": \"seashell\", \"vec\": [255, 245, 238] }, { \"name\": \"sienna\", \"vec\": [160, 82, 45] }, { \"name\": \"skyblue\", \"vec\": [135, 206, 235] }, { \"name\": \"slateblue\", \"vec\": [106, 90, 205] }, { \"name\": \"slategrey\", \"vec\": [112, 128, 144] }, { \"name\": \"snow\", \"vec\": [255, 250, 250] }, { \"name\": \"springgreen\", \"vec\": [0, 255, 127] }, { \"name\": \"steelblue\", \"vec\": [70, 130, 180] }, { \"name\": \"tan\", \"vec\": [210, 180, 140] }, { \"name\": \"thistle\", \"vec\": [216, 191, 216] }, { \"name\": \"tomato\", \"vec\": [255, 99, 71] }, { \"name\": \"turquoise\", \"vec\": [64, 224, 208] }, { \"name\": \"violet\", \"vec\": [238, 130, 238] }, { \"name\": \"wheat\", \"vec\": [245, 222, 179] }, { \"name\": \"whitesmoke\", \"vec\": [245, 245, 245] }, { \"name\": \"yellowgreen\", \"vec\": [154, 205, 50] }, { \"name\": \"rebeccapurple\", \"vec\": [102, 51, 153] }]\r\n\r\nfunction findSimiliarColor(color) {\r\n    const [r, g, b, _] = colorRGBA(color)\r\n    let minDistance = Number.MAX_VALUE\r\n    let res = 'black'\r\n    colorTable.forEach((term) => {\r\n        const [r_, g_, b_] = term.vec\r\n        const d = (r - r_) ** 2 + (g - g_) ** 2 + (b - b_) ** 2\r\n        if (d < minDistance) {\r\n            minDistance = d\r\n            res = term.name\r\n        }\r\n    })\r\n\r\n    return res\r\n}\r\n\r\nexport {\r\n    findSimiliarColor\r\n}","import { useRef } from \"react\"\r\nimport { Tree } from \"antd\"\r\nimport * as d3 from \"d3\"\r\nimport { findSimiliarColor } from \"../utils/color\"\r\nimport { Loader } from \"./Loader\"\r\n\r\nfunction DescriptionTerm({ term, visibleElements }) {\r\n    // 这里必须声明 textInput，这样 ref 才可以引用它\r\n    const description = useRef(null)\r\n\r\n    const styleParameter = (word) => {\r\n        if (Array.isArray(word)) {\r\n            return word.map(\r\n                (_) => `<span class='description-parameter'>${_}</span>`\r\n            )\r\n        }\r\n\r\n        // 判断是颜色\r\n        if (/^#(?:[0-9a-fA-F]{3}){1,2}$/.test(word)) {\r\n            const name = findSimiliarColor(word)\r\n            return `<span class='description-parameter'>${name}(<span style='color: ${word};'>&#9724;</span>${word})</span>`\r\n        }\r\n\r\n        return `<span class='description-parameter'>${word}</span>`\r\n    }\r\n\r\n    d3.selectAll(term.elements).datum((d) => {\r\n        d = d ?? {}\r\n        d.descriptionElements = d.descriptionElements ?? []\r\n        d.descriptionElements.push(description.current)\r\n        return d\r\n    })\r\n    // .on(\"mouseover\", () => {\r\n    //     d3.selectAll(\"p.description-term\").style(\"background-color\", \"#fff\")\r\n    //     d3.select(description.current).style(\"background-color\", \"#e9e9e9\")\r\n    // })\r\n    // .on(\"mouseout\", () => {\r\n    //     d3.selectAll(\"p.description-term\").style(\"background-color\", \"#fff\")\r\n    // })\r\n\r\n    return (\r\n        <p\r\n            className=\"description-term\"\r\n            ref={description}\r\n            style={{\r\n                margin: 0,\r\n                padding: 2,\r\n                fontFamily: \"Times\",\r\n            }}\r\n            onMouseOver={(e) => {\r\n                e.target.style.backgroundColor = \"#e9e9e9\"\r\n                visibleElements.forEach((e) => {\r\n                    d3.select(e).attr(\"opacity\", 0.1)\r\n                })\r\n                term.elements.forEach((e) => {\r\n                    d3.select(e).attr(\"opacity\", 1)\r\n                })\r\n            }}\r\n            onMouseLeave={(e) => {\r\n                e.target.style.backgroundColor = \"#fff\"\r\n                visibleElements.forEach((e) => {\r\n                    d3.select(e).attr(\"opacity\", 1)\r\n                })\r\n            }}\r\n            dangerouslySetInnerHTML={{\r\n                __html: term.content,\r\n                // __html: term.template(\r\n                //     ...term.parameters.map(\r\n                //         styleParameter\r\n                //     )\r\n                // ),\r\n            }}\r\n        ></p>\r\n    )\r\n}\r\n\r\nfunction getTreeData(\r\n    graphDescriptions,\r\n    visibleElements,\r\n    defaultExpandNodes,\r\n    parentKey = \"\"\r\n) {\r\n    const res = []\r\n    graphDescriptions.forEach((term, i) => {\r\n        const key = `${parentKey}-${i}`\r\n        if (term.switch) {\r\n            defaultExpandNodes.push(key)\r\n        }\r\n        res.push({\r\n            title: (\r\n                <DescriptionTerm\r\n                    visibleElements={visibleElements}\r\n                    term={term}\r\n                />\r\n            ),\r\n            key: key,\r\n            children:\r\n                Array.isArray(term.children) && term.children.length > 0\r\n                    ? getTreeData(\r\n                          term.children,\r\n                          visibleElements,\r\n                          defaultExpandNodes,\r\n                          key\r\n                      )\r\n                    : null,\r\n        })\r\n    })\r\n    return res\r\n}\r\n\r\nfunction TreeDescription({ graphDescriptions, visibleElements }) {\r\n    let treeData = []\r\n    const defaultExpandNodes = []\r\n    if (graphDescriptions && graphDescriptions.length) {\r\n        treeData = getTreeData(\r\n            graphDescriptions,\r\n            visibleElements,\r\n            defaultExpandNodes\r\n        )\r\n    }\r\n    return (\r\n        <Tree\r\n            selectable={false}\r\n            treeData={treeData}\r\n            defaultExpandNodes={defaultExpandNodes}\r\n        />\r\n    )\r\n}\r\n\r\nexport function Descriptions({\r\n    graphDescriptions,\r\n    visibleElements,\r\n    loadingText,\r\n    loading,\r\n}) {\r\n    let treeData = []\r\n    const defaultExpandNodes = []\r\n    if (!loading && graphDescriptions && graphDescriptions.length) {\r\n        treeData = getTreeData(\r\n            graphDescriptions,\r\n            visibleElements,\r\n            defaultExpandNodes\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div\r\n            style={{\r\n                margin: 20,\r\n                marginLeft: 30,\r\n            }}\r\n        >\r\n            {!loading && graphDescriptions && graphDescriptions.length ? (\r\n                <Tree\r\n                    style={{\r\n                        fontSize: 18,\r\n                    }}\r\n                    selectable={false}\r\n                    treeData={treeData}\r\n                    defaultExpandedKeys={defaultExpandNodes}\r\n                />\r\n            ) : (\r\n                // graphDescriptions.map((term, i) => {\r\n                //     return <DescriptionTerm\r\n                //         visibleElements={visibleElements}\r\n                //         term={term}\r\n                //     />\r\n                // })\r\n                <Loader\r\n                    style={{\r\n                        margin: 20,\r\n                        marginLeft: 28,\r\n                        padding: 2,\r\n                        fontFamily: \"Times\",\r\n                    }}\r\n                    state={loadingText}\r\n                ></Loader>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n","import * as d3 from \"d3\"\r\nimport { useState, useEffect } from \"react\"\r\n\r\nimport { Header } from \"../components/Header\"\r\nimport { linkConditionDescription } from \"../descriptions/descriptions\"\r\nimport \"./descriptionPanel.css\"\r\nimport { Loader } from \"../components/Loader\"\r\nimport { Descriptions } from \"../components/Descriptions\"\r\nimport { Divider } from \"antd\"\r\n\r\nfunction DescriptionPanel({\r\n    style,\r\n    linkConditions,\r\n    graphDescriptions,\r\n    layoutDescriptions,\r\n    visibleElements,\r\n    loading,\r\n    nodeMeanings,\r\n    switchedOn,\r\n    elementInfo,\r\n}) {\r\n    const [linkMeaningsDescription, setLinkMeaningsDescription] = useState({})\r\n    const [nodeMeaningsDescription, setNodeMeaningsDescription] = useState({})\r\n    const linkingCondition = linkConditionDescription(linkConditions)\r\n    useEffect(() => {\r\n        if (elementInfo !== null) {\r\n            setLinkMeaningsDescription([\r\n                {\r\n                    content: `<span class=\"description-parameter entity-parameter\">Link</span>: ${linkingCondition}`,\r\n                    elements: visibleElements.filter(\r\n                        (e, i) => elementInfo[i]?.entityType === \"link\"\r\n                    ),\r\n                    children: [],\r\n                    parameters: [],\r\n                },\r\n            ])\r\n            setNodeMeaningsDescription([\r\n                {\r\n                    content: `<span class=\"description-parameter entity-parameter\">Node</span>: Nodes represent ${nodeMeanings}.`,\r\n                    elements: visibleElements.filter(\r\n                        (e, i) => elementInfo[i]?.entityType === \"node\"\r\n                    ),\r\n                    children: [],\r\n                    parameters: [],\r\n                },\r\n            ])\r\n        }\r\n    }, [elementInfo, linkingCondition, visibleElements, nodeMeanings])\r\n\r\n    return (\r\n        <div\r\n            style={{\r\n                ...style,\r\n                margin: 5,\r\n                display: `${switchedOn ? \"flex\" : \"none\"}`,\r\n                flexDirection: \"column\",\r\n            }}\r\n        >\r\n            <Header title=\"Descriptions\" />\r\n\r\n            <div\r\n                style={{\r\n                    // borderLeft: \"1px solid gray\",\r\n                    fontSize: 18,\r\n                    paddingLeft: 10,\r\n                }}\r\n            >\r\n                <Divider\r\n                    orientation=\"left\"\r\n                    style={{\r\n                        fontSize: 20,\r\n                        fontFamily: \"Times\",\r\n                    }}\r\n                >\r\n                    Node & Link Meanings\r\n                </Divider>\r\n\r\n                {!loading ? (\r\n                    <div style={{ marginLeft: -30 }}>\r\n                        <Descriptions\r\n                            loading={loading}\r\n                            graphDescriptions={nodeMeaningsDescription}\r\n                            visibleElements={visibleElements}\r\n                            loadingText={\"Computing Node Meanings\"}\r\n                        />\r\n                        <Descriptions\r\n                            loading={loading}\r\n                            graphDescriptions={linkMeaningsDescription}\r\n                            visibleElements={visibleElements}\r\n                            loadingText={\"Computing Link Meanings\"}\r\n                        />\r\n                    </div>\r\n                ) : (\r\n                    <Loader\r\n                        style={{\r\n                            margin: 20,\r\n                            marginLeft: 58,\r\n                            padding: 2,\r\n                            fontFamily: \"Times\",\r\n                        }}\r\n                        state={\"Computing Linking Condition\"}\r\n                    ></Loader>\r\n                )}\r\n\r\n                <Divider\r\n                    orientation=\"left\"\r\n                    style={{\r\n                        fontSize: 20,\r\n                        fontFamily: \"Times\",\r\n                    }}\r\n                >\r\n                    Visual Encoding\r\n                </Divider>\r\n\r\n                <Descriptions\r\n                    loading={loading}\r\n                    graphDescriptions={graphDescriptions}\r\n                    visibleElements={visibleElements}\r\n                    loadingText={\"Computing Visual Encoding\"}\r\n                />\r\n                <Divider\r\n                    orientation=\"left\"\r\n                    style={{\r\n                        fontSize: 20,\r\n                        fontFamily: \"Times\",\r\n                    }}\r\n                >\r\n                    Layout Types\r\n                </Divider>\r\n\r\n                <Descriptions\r\n                    loading={loading}\r\n                    graphDescriptions={layoutDescriptions}\r\n                    visibleElements={visibleElements}\r\n                    loadingText={\"Computing Layout Meaning\"}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport { DescriptionPanel }\r\n","const demos = {\r\n    miserables: {\r\n        data: \"miserables/miserables_5.json\",\r\n        code: \"miserables/code.js\",\r\n    },\r\n    nodeEncoding: {\r\n        data: \"nodeEncoding/data.json\",\r\n        code: \"nodeEncoding/code.js\",\r\n    },\r\n    \"imdb-movies\": {\r\n        data: \"imdb-movies-raw/data.json\",\r\n        code: \"imdb-movies-raw/code.js\",\r\n        preload: \"imdb-movies-raw/preload.json\",\r\n        // data: \"imdb-movies/data.json\",\r\n        // code: \"imdb-movies/code.js\",\r\n        // preload: \"imdb-movies/preload.json\"\r\n    },\r\n    \"imdb-actors\": {\r\n        data: \"imdb-actors-raw/data.json\",\r\n        code: \"imdb-actors-raw/code.js\",\r\n        preload: \"imdb-actors-raw/preload.json\",\r\n        // data: \"imdb-actors/data.json\",\r\n        // code: \"imdb-actors/code.js\",\r\n        // preload: \"imdb-actors/preload.json\"\r\n    },\r\n    \"imdb-movies-link\": {\r\n        data: \"imdb-movies-link/data.json\",\r\n        code: \"imdb-movies-link/code.js\",\r\n        preload: \"imdb-movies-link/preload.json\",\r\n        // data: \"imdb-movies/data.json\",\r\n        // code: \"imdb-movies/code.js\",\r\n        // preload: \"imdb-movies/preload.json\"\r\n    },\r\n    \"imdb-movies-shapes\": {\r\n        data: \"imdb-movies-shapes/data.json\",\r\n        code: \"imdb-movies-shapes/code.js\",\r\n        preload: \"imdb-movies-shapes/preload.json\",\r\n        // data: \"imdb-movies/data.json\",\r\n        // code: \"imdb-movies/code.js\",\r\n        // preload: \"imdb-movies/preload.json\"\r\n    },\r\n}\r\n\r\nasync function getPreloadData(demo) {\r\n    try {\r\n        // 需要异步优化\r\n        const dataStr = await fetch(`data/${demos[demo].data}`).then((res) =>\r\n            res.text()\r\n        )\r\n        const codeStr = await fetch(`data/${demos[demo].code}`).then((res) =>\r\n            res.text()\r\n        )\r\n        const preload = await fetch(`data/${demos[demo].preload}`).then((res) =>\r\n            res.json()\r\n        )\r\n\r\n        return {\r\n            dataFolder: demos[demo].data.split(\"/\")[0],\r\n            dataStr,\r\n            codeStr,\r\n            preload,\r\n        }\r\n    } catch (e) {\r\n        console.error(e)\r\n        return {\r\n            dataStr: \"\",\r\n            codeStr: \"\",\r\n            preload: null,\r\n        }\r\n    }\r\n}\r\n\r\nexport { getPreloadData }\r\n","const getNumericalStats = (data, attr) => {\r\n    const arr = data.nodes.map(n => n[attr])\r\n    arr.sort((a, b) => a - b)\r\n    return {\r\n        min: arr[0],\r\n        max: arr[arr.length - 1],\r\n        q1: arr[parseInt(arr.length * 0.25)],\r\n        q3: arr[parseInt(arr.length * 0.75)],\r\n    }\r\n}\r\n\r\nfunction extractAttributes(data) {\r\n    const res = []\r\n    for (const [k, v] of Object.entries(data.nodes[0])) {\r\n        if (typeof v === 'number') {\r\n            res.push({\r\n                name: k,\r\n                type: 'numerical'\r\n            })\r\n        } else if (typeof v === 'string') {\r\n            res.push({\r\n                name: k,\r\n                type: 'categorical'\r\n            })\r\n        } else if (Array.isArray(v)) {\r\n            res.push({\r\n                name: k,\r\n                type: 'list'\r\n            })\r\n        }\r\n    }\r\n\r\n    res.forEach(attr => {\r\n        if (attr.type === 'numerical') {\r\n            const { min, max, q1, q3 } = getNumericalStats(data, attr.name)\r\n            attr.min = min\r\n            attr.max = max\r\n            attr.q1 = q1\r\n            attr.q3 = q3\r\n        }\r\n    })\r\n\r\n    return res\r\n}\r\n\r\nexport {\r\n    extractAttributes\r\n}","const THRESHOLD = 0.3 // TODO: threshold value\r\n\r\nconst getNormalizedDifference = (val1, val2, attribute) => {\r\n    return val1 === val2\r\n        ? 0\r\n        : Math.abs(val1 - val2) / (attribute.max - attribute.min)\r\n}\r\n\r\nconst intersectList = (l1, l2) => {\r\n    return l1.filter((x) => l2.includes(x)).sort()\r\n}\r\n\r\nconst powerSet = (array) => {\r\n    // O(2^n)\r\n    const results = [[]]\r\n    for (const value of array) {\r\n        const copy = [...results] // See note below.\r\n        for (const prefix of copy) {\r\n            results.push(prefix.concat(value))\r\n        }\r\n    }\r\n    return results\r\n}\r\n\r\nfunction generateLinkingConditions(node1, node2, attributes) {\r\n    const res = {}\r\n    attributes.forEach((attr) => {\r\n        res[attr.name] = {}\r\n        const val1 = node1[attr.name]\r\n        const val2 = node2[attr.name]\r\n        if (val1 === undefined || val2 === undefined) {\r\n            delete res[attr.name]\r\n            return\r\n        }\r\n        if (attr.type === \"categorical\") {\r\n            if (val1 === val2) {\r\n                res[attr.name][\"common\"] = res[attr.name][\"common\"] || {}\r\n                res[attr.name][\"common\"][val1] = 1\r\n                res[attr.name][\"common\"][\"@@any\"] = 1\r\n            }\r\n        } else if (attr.type === \"list\") {\r\n            // list, 遍历所有组合\r\n            const overlap = intersectList(val1, val2)\r\n            if (overlap.length === 0) {\r\n                delete res[attr.name]\r\n                return\r\n            }\r\n            res[attr.name][\"overlap\"] = res[attr.name][\"common\"] || {}\r\n            res[attr.name][\"overlap\"][\"@@any\"] = 1\r\n            const combinations = powerSet(overlap)\r\n            for (const arr of combinations) {\r\n                const key = arr.join(\"-\")\r\n                if (key) {\r\n                    res[attr.name][\"overlap\"][key] = 1\r\n                }\r\n            }\r\n        } else if (attr.type === \"numerical\") {\r\n            const diff = getNormalizedDifference(val1, val2, attr)\r\n            if (diff < THRESHOLD) {\r\n                const rawDiff = Math.abs(val1 - val2)\r\n                // res[attr.name]['similar'] = res[attr.name]['similar'] || {}\r\n                // res[attr.name]['similar'][rawDiff] = 1\r\n                res[attr.name][\"similar\"] = rawDiff\r\n                if (val1 === val2) {\r\n                    res[attr.name][\"common\"] = res[attr.name][\"common\"] || {}\r\n                    res[attr.name][\"common\"][val1] = 1\r\n                    res[attr.name][\"common\"][\"@@any\"] = 1\r\n                }\r\n            }\r\n\r\n            // 四位数\r\n            if (val1 < attr.q1 && val2 < attr.q1) {\r\n                res[attr.name][\"same-bin\"] = res[attr.name][\"same-bin\"] || {}\r\n                res[attr.name][\"same-bin\"][\"low\"] = 1\r\n                res[attr.name][\"same-bin\"][\"@@any\"] = 1\r\n            } else if (\r\n                val1 >= attr.q1 &&\r\n                val1 <= attr.q3 &&\r\n                val2 >= attr.q1 &&\r\n                val2 <= attr.q3\r\n            ) {\r\n                res[attr.name][\"same-bin\"] = res[attr.name][\"same-bin\"] || {}\r\n                res[attr.name][\"same-bin\"][\"middle\"] = 1\r\n                res[attr.name][\"same-bin\"][\"@@any\"] = 1\r\n            } else if (val1 > attr.q3 && val2 > attr.q3) {\r\n                res[attr.name][\"same-bin\"] = res[attr.name][\"same-bin\"] || {}\r\n                res[attr.name][\"same-bin\"][\"high\"] = 1\r\n                res[attr.name][\"same-bin\"][\"@@any\"] = 1\r\n            }\r\n        }\r\n        if (Object.keys(res[attr.name]).length === 0) {\r\n            delete res[attr.name]\r\n        }\r\n    })\r\n\r\n    return res\r\n}\r\n\r\n/**\r\n * condition: attr-relation-value-cnt\r\n * @param {*} condition1\r\n * @param {*} condition2\r\n */\r\nfunction unionCondition(condition1, condition2) {\r\n    const res = Object.assign({}, condition1)\r\n    for (const attr in condition2) {\r\n        if (!(attr in res)) {\r\n            res[attr] = condition2[attr]\r\n            continue\r\n        }\r\n        for (const relation in condition2[attr]) {\r\n            if (!(relation in res[attr])) {\r\n                res[attr][relation] = condition2[attr][relation]\r\n                continue\r\n            }\r\n            if (relation === \"similar\") {\r\n                res[attr][relation] = Math.min(\r\n                    res[attr][relation],\r\n                    condition2[attr][relation]\r\n                )\r\n            } else {\r\n                for (const value in condition2[attr][relation]) {\r\n                    if (!(value in res[attr][relation])) {\r\n                        res[attr][relation][value] =\r\n                            condition2[attr][relation][value]\r\n                    } else {\r\n                        res[attr][relation][value] +=\r\n                            condition2[attr][relation][value]\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return res\r\n}\r\n\r\nfunction accumulateCondition(condition1, condition2) {\r\n    const res = Object.assign({}, condition1)\r\n    for (const attr in condition2) {\r\n        if (!(attr in res)) {\r\n            res[attr] = condition2[attr]\r\n            continue\r\n        }\r\n        for (const relation in condition2[attr]) {\r\n            if (!(relation in res[attr])) {\r\n                res[attr][relation] = condition2[attr][relation]\r\n                continue\r\n            }\r\n            // NOTE: 跟union不一样，会统计频率\r\n            // if (relation === 'similar') {\r\n            // res[attr][relation] = Math.min(res[attr][relation], condition2[attr][relation])\r\n            // } else {\r\n            for (const value in condition2[attr][relation]) {\r\n                if (!(value in res[attr][relation])) {\r\n                    res[attr][relation][value] =\r\n                        condition2[attr][relation][value]\r\n                } else {\r\n                    res[attr][relation][value] +=\r\n                        condition2[attr][relation][value]\r\n                }\r\n            }\r\n            // }\r\n        }\r\n    }\r\n    return res\r\n}\r\n\r\nfunction excludeCondition(condition1, condition2) {\r\n    // NOTE: may change condition1, but not condition2\r\n    const res = Object.assign({}, condition1)\r\n    for (const attr in condition2) {\r\n        if (!(attr in res)) {\r\n            continue\r\n        }\r\n        for (const relation in condition2[attr]) {\r\n            if (!(relation in res[attr])) {\r\n                continue\r\n            }\r\n            if (typeof res[attr][relation] === \"number\") {\r\n                // NOTE: exclude的时候，不同的处理方式不同\r\n                if (res[attr][relation] >= condition2[attr][relation]) {\r\n                    delete res[attr][relation]\r\n                } else {\r\n                    res[attr][relation] = { [condition2[attr][relation]]: 1 }\r\n                }\r\n            } else {\r\n                for (const value in condition2[attr][relation]) {\r\n                    if (value in res[attr][relation]) {\r\n                        delete res[attr][relation][value]\r\n                    }\r\n                }\r\n                if (Object.keys(res[attr][relation]).length === 0) {\r\n                    delete res[attr][relation]\r\n                }\r\n            }\r\n        }\r\n        if (Object.keys(res[attr]).length === 0) {\r\n            delete res[attr]\r\n        }\r\n    }\r\n    return res\r\n}\r\n\r\nexport {\r\n    generateLinkingConditions,\r\n    unionCondition,\r\n    excludeCondition,\r\n    accumulateCondition,\r\n}\r\n","import { BASIC_SVG_ELEMENTS, COMMON_STYLE_CHANNELS } from \"./global\"\r\nimport { dom, object } from \"./utils\"\r\n\r\nexport class NLDCompDiff {\r\n    constructor() {\r\n        this.array = []\r\n    }\r\n    isItemEmpty(item) {\r\n        if (item?.tagName) {\r\n            // tagName different\r\n            return false\r\n        } else {\r\n            if (item?.style) {\r\n                if (Object.keys(item.style).length > 0) {\r\n                    // and something is in item.style\r\n                    return false\r\n                }\r\n            }\r\n        }\r\n        return true\r\n    }\r\n    isEmpty() {\r\n        return this.array.every(this.isItemEmpty)\r\n    }\r\n    getIndexOfDifferences() {\r\n        const indexes = []\r\n        this.array.forEach((item, i) => {\r\n            if (!this.isItemEmpty(item)) {\r\n                indexes.push(i)\r\n            }\r\n        })\r\n        return indexes\r\n    }\r\n    /**\r\n     * eliminate unstable channels from difference\r\n     * only remain stable channels\r\n     * @param {NLDCompDiff} unstableComponents\r\n     */\r\n    eliminate(unstableComponents) {\r\n        const unstableArray = unstableComponents.array\r\n        this.array.forEach((item, i) => {\r\n            const unstableItem = unstableArray[i]\r\n            if (item.tagName && unstableItem.tagName) {\r\n                delete item.tagName\r\n            }\r\n            if (item.style) {\r\n                for (let channel in item.style) {\r\n                    if (unstableItem.style && unstableItem.style[channel]) {\r\n                        delete item.style[channel]\r\n                    }\r\n                }\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nexport class NLDComponents {\r\n    // node link diagram components\r\n    constructor(svg) {\r\n        if (svg) {\r\n            this.osvg = svg // origin svg\r\n\r\n            // compute style\r\n            // document.body.appendChild(svg)\r\n\r\n            const basicElementArray = []\r\n            object.dfs(svg, function (element) {\r\n                // compute styles (include tagName), only keep basic\r\n                if (BASIC_SVG_ELEMENTS.has(element.tagName)) {\r\n                    const style = dom.getComputedStyle(element)\r\n                    basicElementArray.push({\r\n                        tagName: element.tagName,\r\n                        element,\r\n                        style,\r\n                    })\r\n                }\r\n            })\r\n            this.basicElementArray = basicElementArray\r\n\r\n            // document.body.removeChild(svg)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * !Assume two arrays are equilong (equal length) and the sequences are same,\r\n     * compare whether this NLDComponents is diff with anotherNLDComponents.\r\n     * Only compare whether some styles of a basic svg element are different\r\n     * @param {NLDComponents} anotherNLDComponents\r\n     * @return {NLDComponents} diff: a NLDComponents which only stores differences\r\n     */\r\n    diffWith(anotherNLDComponents) {\r\n        const diff = new NLDCompDiff()\r\n        const n = Math.min(\r\n            this.basicElementArray.length,\r\n            anotherNLDComponents.basicElementArray.length\r\n        )\r\n        for (let i = 0; i < n; i++) {\r\n            const ele1 = this.basicElementArray[i]\r\n            const ele2 = anotherNLDComponents.basicElementArray[i]\r\n            let eleDiff = undefined\r\n            let channels\r\n            if (ele1.tagName == ele2.tagName) {\r\n                channels = new Set(\r\n                    Object.keys(ele1.style).concat(Object.keys(ele2.style))\r\n                )\r\n            } else {\r\n                // tagName is different\r\n                eleDiff = { tagName: true }\r\n                // is any other general channel different?\r\n                channels = COMMON_STYLE_CHANNELS\r\n            }\r\n            channels.forEach((channel) => {\r\n                if (!object.isEqual(ele1.style[channel], ele2.style[channel])) {\r\n                    if (!eleDiff) {\r\n                        eleDiff = { style: {} }\r\n                    }\r\n                    eleDiff.style = eleDiff.style ?? {}\r\n                    eleDiff.style[channel] = true\r\n                }\r\n            })\r\n            diff.array.push(eleDiff)\r\n        }\r\n        return diff\r\n    }\r\n}\r\n","/**\r\n * @create date 2021-03-07 20:18:51\r\n * @modify date 2021-03-07 20:18:51\r\n * @desc [description]\r\n */\r\nimport { NLDComponents } from './NLDComponents'\r\n/**\r\n * if structure\r\n * @param {html dom element} element1\r\n * @param {html dom element} element2\r\n * @return {NLDCompDiff} diff: a NLDCompDiff which extends Array: [{tagName: boolean, style:{[visual channel]: boolean}}]\r\n */\r\nexport default function compare(element1, element2) {\r\n    const NLDComponents1 = new NLDComponents(element1)\r\n    const NLDComponents2 = new NLDComponents(element2)\r\n    const diff = NLDComponents1.diffWith(NLDComponents2)\r\n    return diff\r\n}\r\n","import { Statistics } from \"statistics.js\"\r\nimport { BACKEND_URL } from \"../configs\"\r\nimport { calcDistance } from \"./graphDistance\"\r\n\r\nfunction computePearsonCorrelation(X, Y) {\r\n    // 计算相关系数r\r\n    // https://thisancog.github.io/statistics.js/inc/correlation.html\r\n    const data = []\r\n    for (let i = 0; i < X.length; i++) {\r\n        data.push({ x: X[i], y: Y[i] })\r\n    }\r\n    const columns = {\r\n        x: \"metric\",\r\n        y: \"metric\",\r\n    }\r\n    const stats = new Statistics(data, columns)\r\n    const r = stats.correlationCoefficient(\"x\", \"y\")\r\n    return r.correlationCoefficient\r\n}\r\n\r\nfunction computeKendallsTau(X, Y) {\r\n    // 计算Mann-Kendall Test for Trend\r\n    const data = []\r\n    for (let i = 0; i < X.length; i++) {\r\n        data.push({ x: X[i], y: Y[i] })\r\n    }\r\n\r\n    data.sort((a, b) => a.x - b.x)\r\n    const columns = {\r\n        x: \"ordinal\",\r\n        y: \"ordinal\",\r\n    }\r\n    const stats = new Statistics(data, columns)\r\n    const r = stats.kendallsTau(\"x\", \"y\")\r\n    return r.b.tauB\r\n}\r\n\r\nfunction checkDataType(array) {\r\n    // 无法转化成数字\r\n    for (let i = 0; i < array.length; i++) {\r\n        if (isNaN(parseFloat(array[i]))) {\r\n            return {\r\n                first: \"categorical\",\r\n                second: null,\r\n            }\r\n        }\r\n    }\r\n\r\n    // 个数小于5且都是整数\r\n    if (array.length <= 5 && array.every((x) => Number.isInteger(x))) {\r\n        return {\r\n            first: \"categorical\",\r\n            second: \"numerical\",\r\n        }\r\n    }\r\n\r\n    // unique的数量小于30%\r\n    if (new Set(array).size < array.length * 0.3) {\r\n        return {\r\n            first: \"categorical\",\r\n            second: \"numerical\",\r\n        }\r\n    }\r\n\r\n    return {\r\n        first: \"numerical\",\r\n        second: null,\r\n    }\r\n}\r\n\r\n// async function attributeRelation(X, Y) {\r\nfunction attributeRelation(X, Y, threshold = 0.6) {\r\n    // console.log(X, Y)\r\n    // 判断数据类型\r\n    let dataTypeX = checkDataType(X)\r\n    let dataTypeY = checkDataType(Y)\r\n    // let correlationTest = null\r\n\r\n    // 预先判断可能的数值类型\r\n    if (\r\n        (dataTypeX.first === \"numerical\" || dataTypeX.second === \"numerical\") &&\r\n        (dataTypeY.first === \"numerical\" || dataTypeY.second === \"numerical\")\r\n    ) {\r\n        X = X.map((x) => parseFloat(x))\r\n        Y = Y.map((y) => parseFloat(y))\r\n        // Pearson Correlation & Kendall's Tau\r\n        const pearsonCorrelation = computePearsonCorrelation(X, Y)\r\n        // const kendallsTau = computeKendallsTau(X, Y)\r\n        // const correlationTest = await fetch(BACKEND_URL + \"pearson-kendall\", {\r\n        //     method: \"POST\",\r\n        //     headers: {\r\n        //         \"Content-Type\": \"application/json\",\r\n        //     },\r\n        //     body: JSON.stringify({ X, Y }),\r\n        // }).then((res) => res.json())\r\n\r\n        if (\r\n            // correlationTest.pearson.pvalue < 0.05 &&\r\n            // correlationTest.kendall.pvalue < 0.05\r\n            Math.abs(pearsonCorrelation) > threshold\r\n        ) {\r\n            return {\r\n                typeX: \"numerical\",\r\n                typeY: \"numerical\",\r\n                correlation: pearsonCorrelation,\r\n                // pearson: correlationTest.pearson,\r\n                // kendall: correlationTest.kendall,\r\n            }\r\n        }\r\n    }\r\n\r\n    dataTypeX = dataTypeX.first\r\n    dataTypeY = dataTypeY.first\r\n\r\n    if (dataTypeX === \"numerical\" && dataTypeY === \"numerical\") {\r\n        X = X.map((x) => parseFloat(x))\r\n        Y = Y.map((y) => parseFloat(y))\r\n        // Pearson Correlation & Kendall's Tau\r\n        // const pearsonCorrelation = computePearsonCorrelation(X, Y)\r\n        // const kendallsTau = computeKendallsTau(X, Y)\r\n        // if (!correlationTest) {\r\n        //     correlationTest = await fetch(BACKEND_URL + \"pearson-kendall\", {\r\n        //         method: \"POST\",\r\n        //         headers: {\r\n        //             \"Content-Type\": \"application/json\",\r\n        //         },\r\n        //         body: JSON.stringify({ X, Y }),\r\n        //     }).then((res) => res.json())\r\n        // }\r\n\r\n        // console.log(correlationTest)\r\n        const pearsonCorrelation = computePearsonCorrelation(X, Y)\r\n\r\n        return {\r\n            typeX: dataTypeX,\r\n            typeY: dataTypeY,\r\n            correlation: pearsonCorrelation,\r\n            // pearson: correlationTest.pearson,\r\n            // kendall: correlationTest.kendall,\r\n        }\r\n    }\r\n\r\n    if (dataTypeY === \"categorical\") {\r\n        if (dataTypeX === \"categorical\") {\r\n            const map = {}\r\n            for (let i = 0; i < X.length; i++) {\r\n                if (!map[Y[i]]) {\r\n                    map[Y[i]] = new Set()\r\n                }\r\n                map[Y[i]].add(X[i])\r\n            }\r\n            for (const k in map) {\r\n                map[k] = Array.from(map[k])\r\n            }\r\n\r\n            return {\r\n                typeX: dataTypeX,\r\n                typeY: dataTypeY,\r\n                attributeMapping: map,\r\n            }\r\n        } else {\r\n            const map = {}\r\n            for (let i = 0; i < X.length; i++) {\r\n                if (!map[Y[i]]) {\r\n                    map[Y[i]] = { min: Number.MAX_VALUE, max: Number.MIN_VALUE }\r\n                }\r\n                map[Y[i]].min = Math.min(map[Y[i]].min, X[i])\r\n                map[Y[i]].max = Math.max(map[Y[i]].max, X[i])\r\n            }\r\n\r\n            return {\r\n                typeX: dataTypeX,\r\n                typeY: dataTypeY,\r\n                attributeMapping: map,\r\n            }\r\n        }\r\n    }\r\n\r\n    return undefined\r\n}\r\n\r\nfunction layoutRelation(graph) {\r\n    let { euclidMatrix, floydMatrix } = calcDistance(graph)\r\n    const N = euclidMatrix.length\r\n    floydMatrix = floydMatrix.flat()\r\n    euclidMatrix = euclidMatrix.flat()\r\n    const combined = []\r\n    for (let i = 0; i < floydMatrix.length; i++) {\r\n        combined.push({\r\n            floyd: floydMatrix[i],\r\n            euclid: euclidMatrix[i],\r\n        })\r\n    }\r\n    combined.sort((a, b) => (a.floyd - b.floyd))\r\n    const data = combined.slice(N)\r\n    // 计算相关系数r\r\n    // https://thisancog.github.io/statistics.js/inc/correlation.html\r\n    const columns = {\r\n        floyd: 'metric',\r\n        euclid: 'metric',\r\n    }\r\n    const stats = new Statistics(data, columns)\r\n    const r = stats.correlationCoefficient('floyd', 'euclid')\r\n    return r.correlationCoefficient\r\n}\r\n\r\n// debug\r\n\r\n/*\r\nconst X = [1, 1, 1, 1, 1, 1, 1, 1]\r\nconst Y = ['a', 'b', 'c', 'd', 'a', 'b', 'c', 'd']\r\n\r\nconsole.log(attributeRelation(X, Y))\r\n*/\r\n\r\nexport {\r\n    attributeRelation,\r\n    layoutRelation,\r\n}\r\n","function calcEulerDistance(graph) {\r\n    const N = graph.nodes.length\r\n    const matrix = Array(N).fill().map(() => Array(N).fill(0))\r\n    const idToIdx = {}\r\n    graph.nodes.forEach((n, i) => {\r\n        idToIdx[n.id] = i\r\n    })\r\n\r\n    graph.nodes.forEach((a, i) => {\r\n        graph.nodes.forEach((b, j) => {\r\n            if (i !== j)\r\n                matrix[i][j] = Math.sqrt((a.x - b.x) ** 2 + (a.y - b.y) ** 2)\r\n        })\r\n    })\r\n\r\n    return matrix\r\n}\r\n\r\nfunction floyd(graph) {\r\n    let INF = Infinity;\r\n    const id_to_index = new Map();\r\n    let n = graph[\"nodes\"].length;\r\n    let matrix = [];\r\n\r\n    for (let i = 0; i < n; ++i) {\r\n        id_to_index.set(graph[\"nodes\"][i][\"id\"], i);\r\n\r\n        const unit = [];\r\n        for (let j = 0; j < n; ++j) {\r\n            unit.push(INF);\r\n        }\r\n        matrix.push(unit);\r\n    }\r\n\r\n    for (let i = 0; i < n; ++i) {\r\n        matrix[i][i] = 0;\r\n    }\r\n\r\n    for (let i = 0; i < graph[\"links\"].length; ++i) {\r\n        let fr = id_to_index.get(graph[\"links\"][i][\"source\"]);\r\n        let to = id_to_index.get(graph[\"links\"][i][\"target\"]);\r\n        matrix[fr][to] = 1\r\n        matrix[to][fr] = 1\r\n    }\r\n\r\n    for (let k = 0; k < n; ++k) {\r\n        for (let i = 0; i < n; ++i) {\r\n            for (let j = 0; j < n; ++j) {\r\n                if (matrix[i][k] + matrix[k][j] < matrix[i][j]) {\r\n                    matrix[i][j] = matrix[i][k] + matrix[k][j];\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return matrix;\r\n}\r\n\r\nfunction calcDistance(graph) {\r\n    const N = graph.nodes.length\r\n    const idToIdx = {}\r\n    graph.nodes.forEach((n, i) => {\r\n        idToIdx[n.id] = i\r\n    })\r\n\r\n    const euclidMatrix = Array(N).fill().map(() => Array(N).fill(0))\r\n    graph.nodes.forEach((a, i) => {\r\n        graph.nodes.forEach((b, j) => {\r\n            if (i !== j)\r\n                euclidMatrix[i][j] = Math.sqrt((a.x - b.x) ** 2 + (a.y - b.y) ** 2)\r\n        })\r\n    })\r\n\r\n    const floydMatrix = Array(N).fill().map(() => Array(N).fill(Infinity))\r\n    for (let i = 0; i < N; ++i) {\r\n        floydMatrix[i][i] = 0;\r\n    }\r\n\r\n    for (let i = 0; i < graph[\"links\"].length; ++i) {\r\n        let fr = idToIdx[graph[\"links\"][i][\"source\"]];\r\n        let to = idToIdx[graph[\"links\"][i][\"target\"]];\r\n        floydMatrix[fr][to] = 1\r\n        floydMatrix[to][fr] = 1\r\n    }\r\n\r\n    for (let k = 0; k < N; ++k) {\r\n        for (let i = 0; i < N; ++i) {\r\n            for (let j = 0; j < N; ++j) {\r\n                if (floydMatrix[i][k] + floydMatrix[k][j] < floydMatrix[i][j]) {\r\n                    floydMatrix[i][j] = floydMatrix[i][k] + floydMatrix[k][j];\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return {\r\n        euclidMatrix,\r\n        floydMatrix\r\n    }\r\n}\r\n\r\nexport {\r\n    calcDistance\r\n}","import * as d3 from \"d3\"\r\nimport compare from \"./compare\"\r\nimport { object, NoLinDiagram } from \"./utils\"\r\nimport { NLDComponents } from \"./NLDComponents\"\r\nimport { CONNECTOR_CHAR, SHARED_CHANNELS } from \"./global\"\r\nimport { attributeRelation } from \"../attributeRelation/attributeRelation\"\r\n\r\n/**\r\n *\r\n * @param {Object} graph: standard node-link data format\r\n * @param {Function} func: the function that takes data as input and generate a node-link diagram (svg format)\r\n * @param {String} entityType: 'nodes' | 'links'\r\n * @param {Dict} entity2element: {entityIndex => elementIndex}\r\n * @param {Dict} element2label: {elementIndex => label}\r\n */\r\nexport function mapAttribute2Channel(\r\n    graph,\r\n    func,\r\n    entityType,\r\n    entity2element,\r\n    element2label\r\n) {\r\n    // Step1: Eliminate random encoding\r\n    const svg = func(d3, object.deepcopy(graph))\r\n    const svgBeta = func(d3, object.deepcopy(graph))\r\n    const unstableComponents = compare(svg, svgBeta)\r\n\r\n    // Step2: shuffle all attributes, find which channels are influnced\r\n    const attributes = NoLinDiagram.getAttributesOf(\r\n        graph\r\n    ) /* Map(name <=> {entityType, range}) */\r\n    const svgOrigin = func(d3, object.deepcopy(graph))\r\n    const nldOrigin = new NLDComponents(svgOrigin)\r\n    const label2attr2diff = {}\r\n    for (let [name, { type, range }] of attributes[entityType].entries()) {\r\n        // Step2.1: shuffle and generate\r\n        const shuffledGraph = object.deepcopy(graph)\r\n        const shuffledRange = d3.shuffle(range.slice())\r\n        shuffledGraph[entityType].forEach((entity, i) => {\r\n            const CONNECTOR = \"@\"\r\n            if (name.indexOf(CONNECTOR) > 0) {\r\n                entity[name.split(CONNECTOR)[0]][name.split(CONNECTOR)[1]] =\r\n                    shuffledRange[i]\r\n            } else {\r\n                entity[name] = shuffledRange[i]\r\n            }\r\n        })\r\n        const svgShuffled = func(d3, shuffledGraph)\r\n        const nldShuffled = new NLDComponents(svgShuffled)\r\n        const diffs = nldOrigin.diffWith(nldShuffled)\r\n\r\n        if (!unstableComponents.isEmpty()) {\r\n            diffs.eliminate(unstableComponents)\r\n        }\r\n        if (diffs.isEmpty()) {\r\n            // if this attribute cannot cause any change to svg\r\n            // no need to test it\r\n            continue\r\n        }\r\n\r\n        // Step2.2: merge diffs by label\r\n        diffs.array.forEach((diffItem, elementIndex) => {\r\n            if (diffItem) {\r\n                const label = element2label[elementIndex]\r\n                if (label != undefined && label != \"undefined\") {\r\n                    label2attr2diff[label] = label2attr2diff[label] ?? {}\r\n                    const attr2diff = label2attr2diff[label]\r\n                    attr2diff[name] = attr2diff[name] ?? {}\r\n                    if (diffItem.style) {\r\n                        Object.keys(diffItem.style).forEach((channel) => {\r\n                            if (SHARED_CHANNELS.has(channel)) {\r\n                                // e.g. ellipse and rect share rx and ry\r\n                                const tagName =\r\n                                    nldShuffled.basicElementArray[elementIndex]\r\n                                        .tagName\r\n                                diffItem.style[channel + \".\" + tagName] =\r\n                                    diffItem.style[channel]\r\n                                delete diffItem.style[channel]\r\n                            }\r\n                        })\r\n                    }\r\n                    attr2diff[name] = mergeDiff(diffItem, attr2diff[name])\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    // Step3: compute correlations\r\n    // compute label2elements, element2entity\r\n    const label2elements = {}\r\n    const element2entity = []\r\n    element2label.forEach((label, elementIndex) => {\r\n        if (!label2elements[label]) {\r\n            label2elements[label] = new Set()\r\n        }\r\n        label2elements[label].add(elementIndex)\r\n    })\r\n    entity2element.forEach((eleIndexSet, entityIndex) => {\r\n        eleIndexSet.forEach((eleIndex) => {\r\n            element2entity[eleIndex] = entityIndex\r\n        })\r\n    })\r\n\r\n    for (let label in label2attr2diff) {\r\n        const attr2diff = label2attr2diff[label]\r\n        for (let attr in attr2diff) {\r\n            const diff = attr2diff[attr]\r\n            const channelNames = []\r\n            // record channelNames\r\n            if (diff.tagName) {\r\n                channelNames.push(\"tagName\")\r\n            }\r\n            if (diff.style) {\r\n                for (let channel in diff.style) {\r\n                    diff.style[channel] && channelNames.push(channel)\r\n                }\r\n            }\r\n            // record channel values\r\n            const channels = {}\r\n            channelNames.forEach((name) => {\r\n                channels[name] = []\r\n            })\r\n            label2elements[label].forEach((elementIndex) => {\r\n                const entityIndex = element2entity[elementIndex]\r\n                const element = nldOrigin.basicElementArray[elementIndex]\r\n                let attrVal = graph[entityType][entityIndex][attr]\r\n                const CONNECTOR = \"@\"\r\n                if (attr.indexOf(CONNECTOR) > 0) {\r\n                    attrVal =\r\n                        graph[entityType][entityIndex][\r\n                            attr.split(CONNECTOR)[0]\r\n                        ][attr.split(CONNECTOR)[1]]\r\n                }\r\n\r\n                channelNames.forEach((name) => {\r\n                    if (name === \"tagName\") {\r\n                        channels[name][entityIndex] = [attrVal, element.tagName]\r\n                    } else {\r\n                        channels[name][entityIndex] = [\r\n                            attrVal,\r\n                            element.style[name.split(\".\")[0]],\r\n                        ]\r\n                    }\r\n                })\r\n            })\r\n\r\n            for (let i = 0; i < channelNames.length; i++) {\r\n                const name = channelNames[i]\r\n                channels[name] = channels[name].filter(([attrVal, chanVal]) => {\r\n                    return (\r\n                        chanVal !== undefined &&\r\n                        chanVal !== \"auto\" &&\r\n                        chanVal !== \"undefined\"\r\n                    )\r\n                })\r\n                const x = channels[name].map((_) => _[0])\r\n                const y = channels[name].map((_) => _[1])\r\n                let indepVariable = x\r\n                let depVariable = y\r\n                // if (x.some((_) => Array.isArray(_))) {\r\n                //     for (let i = 0; i < x[0].length; i++) {\r\n                //         // assume it is a equal-length array\r\n                //         indepVariable = x.map((_) => _[i])\r\n                //         attributeRelation(\r\n                //             indepVariable,\r\n                //             depVariable\r\n                //         ).then((relation) => {})\r\n                //     }\r\n                // } else {\r\n                // const relation = await attributeRelation(\r\n                const relation = attributeRelation(\r\n                    indepVariable,\r\n                    depVariable\r\n                )\r\n\r\n                if (relation) {\r\n                    if (\r\n                        relation.typeX === \"numerical\" &&\r\n                        relation.typeY === \"categorical\"\r\n                    )\r\n                        debugger\r\n                    if (name === \"tagName\") {\r\n                        diff.tagName = relation\r\n                    } else {\r\n                        diff.style[name] = relation\r\n                    }\r\n                }\r\n                // }\r\n            }\r\n        }\r\n    }\r\n    // console.log(label2attr2diff)\r\n    return label2attr2diff\r\n\r\n    function mergeDiff(diff1, diff2) {\r\n        const mergedDiff = {}\r\n        const diffs = [diff1, diff2]\r\n        diffs.forEach((diff) => {\r\n            if (diff.tagName) {\r\n                mergedDiff.tagName |= diff.tagName\r\n            }\r\n            if (diff.style) {\r\n                for (let channel in diff.style) {\r\n                    mergedDiff.style = mergedDiff.style ?? {}\r\n                    mergedDiff.style[channel] |= diff.style[channel]\r\n                }\r\n            }\r\n        })\r\n        return mergedDiff\r\n    }\r\n}\r\n\r\n/**\r\n *\r\n * @param {Object} graph: standard node-link data format\r\n * @param {Function} func: the function that takes data as input and generate a node-link diagram (svg format)\r\n * @param {String} entityType: 'nodes' | 'links'\r\n */\r\nexport function mapEntity2Element(graph, func, entityType) {\r\n    // Step1: Eliminate random encoding\r\n    const svg = func(d3, object.deepcopy(graph))\r\n    const svgBeta = func(d3, object.deepcopy(graph))\r\n    const unstableComponents = compare(svg, svgBeta)\r\n\r\n    // Step2: Get the Mapping\r\n    const entity2element = new Array(graph[entityType].length) // : [[entityIndex]: Set(elementIndex)]\r\n    const svgOrigin = func(d3, object.deepcopy(graph))\r\n\r\n    // Step2.2: get the mapping by swapping entities\r\n    // swap two entities\r\n    // we assume that it will not change the element sequence\r\n    const labelsOfElements = []\r\n    labelsOfElements.max = 0\r\n    const swapCache = new Map()\r\n    for (let i = 0; i < graph[entityType].length; i++) {\r\n        console.log(\r\n            `%c For %c${entityType}%c's attribute, computing %c${entityType}%c[%c${i}/${graph[entityType].length}%c]'s encoding...`,\r\n            \"background: #222; color: #bada55\",\r\n            \"background: #222; color: #d94e54\",\r\n            \"background: #222; color: #bada55\",\r\n            \"background: #222; color: #d94e54\",\r\n            \"background: #222; color: #bada55\",\r\n            \"background: #222; color: #d94e54\",\r\n            \"background: #222; color: #bada55\"\r\n        )\r\n\r\n        let clonedGraph = object.deepcopy(graph)\r\n        let thisEntity = clonedGraph[entityType][i]\r\n        let svgControl = svgOrigin\r\n\r\n        // Step2.2.1 find all entities that don't have totally same attributes with entities[i]\r\n        let entitiesWithDiffAttr_INDEX = findEntitiesWithDiffAttr_INDEX(\r\n            thisEntity,\r\n            clonedGraph\r\n        )\r\n        function findEntitiesWithDiffAttr_INDEX(thisEntity, graph) {\r\n            let entitiesWithDiffAttr_INDEX = [] // entities with different attribute (just stores index)\r\n            let valueStack = []\r\n            function isAttributesAllSame(entity) {\r\n                return !Object.keys(thisEntity).some(\r\n                    (name) =>\r\n                        name !== \"id\" &&\r\n                        name !== \"source\" &&\r\n                        name !== \"target\" &&\r\n                        !object.isEqual(thisEntity[name], entity[name])\r\n                )\r\n            }\r\n            graph[entityType].forEach((entity, j) => {\r\n                if (!isAttributesAllSame(entity)) {\r\n                    if (\r\n                        valueStack.every(\r\n                            (value) => !isAttributesAllSame(value, entity)\r\n                        )\r\n                    ) {\r\n                        entitiesWithDiffAttr_INDEX.push(j)\r\n                    }\r\n                }\r\n            })\r\n            return entitiesWithDiffAttr_INDEX\r\n        }\r\n\r\n        // Step2.2.2 swap thisEntity with each of entities with at least one different attribute\r\n        if (entitiesWithDiffAttr_INDEX.length == 0) {\r\n            console.error(\r\n                \"All entities have same attribute, algorithm can not detect any encoding.\"\r\n            )\r\n            debugger // some thing wrong, all entities have same attribute\r\n        } else if (entitiesWithDiffAttr_INDEX.length == 1) {\r\n            // only one entity is different with thisEntity\r\n            // first swap with the diff entity\r\n            const j = entitiesWithDiffAttr_INDEX[0]\r\n            clonedGraph[entityType][i] = clonedGraph[entityType][j]\r\n            clonedGraph[entityType][j] = thisEntity\r\n            thisEntity = clonedGraph[entityType][i]\r\n            // second re-find entities with different attribute\r\n            entitiesWithDiffAttr_INDEX = findEntitiesWithDiffAttr_INDEX(\r\n                thisEntity,\r\n                clonedGraph\r\n            )\r\n            // if still only one entity diff with thisEntity, can not deal with such case\r\n            if (entitiesWithDiffAttr_INDEX.length == 1) {\r\n                console.error(\r\n                    `Cannot deal with ${entityType}[${i}], only one ${entityType.slice(\r\n                        0,\r\n                        -1\r\n                    )} diffs with it.`\r\n                )\r\n                debugger\r\n            } else {\r\n                // re-generate the control group svg\r\n                svgControl = func(d3, object.deepcopy(clonedGraph))\r\n            }\r\n        }\r\n\r\n        // swap this entity with any other diff entities\r\n        const elementFrequency = {}\r\n        const nldControl = new NLDComponents(svgControl)\r\n        entitiesWithDiffAttr_INDEX.forEach((entityIndex) => {\r\n            const entity = clonedGraph[entityType][entityIndex]\r\n\r\n            clonedGraph[entityType][i] = entity\r\n            clonedGraph[entityType][entityIndex] = thisEntity\r\n            thisEntity = clonedGraph[entityType][i]\r\n\r\n            let nldBeforeSwap, nldAfterSwap, indexofSwapDiff\r\n            const key = `${entityIndex}${CONNECTOR_CHAR}${i}`\r\n\r\n            if (swapCache.has(key)) {\r\n                ;[nldBeforeSwap, nldAfterSwap, indexofSwapDiff] = swapCache.get(\r\n                    key\r\n                )\r\n            }\r\n\r\n            if (!nldBeforeSwap && !nldAfterSwap && !indexofSwapDiff) {\r\n                nldBeforeSwap = nldControl\r\n                const svgAfterSwap = func(d3, object.deepcopy(clonedGraph))\r\n                nldAfterSwap = new NLDComponents(svgAfterSwap)\r\n                const swapDiff = nldBeforeSwap.diffWith(nldAfterSwap)\r\n\r\n                if (!unstableComponents.isEmpty()) {\r\n                    swapDiff.eliminate(unstableComponents)\r\n                }\r\n\r\n                indexofSwapDiff = swapDiff.getIndexOfDifferences()\r\n                swapCache.set(`${i}${CONNECTOR_CHAR}${entityIndex}`, [\r\n                    nldBeforeSwap,\r\n                    nldAfterSwap,\r\n                    indexofSwapDiff,\r\n                ])\r\n            }\r\n\r\n            indexofSwapDiff.forEach((elementIndex) => {\r\n                if (!elementFrequency[elementIndex]) {\r\n                    elementFrequency[elementIndex] = 0\r\n                }\r\n                elementFrequency[elementIndex] += 1\r\n                if (elementFrequency[elementIndex] >= 2) {\r\n                    // occurs more than once, it should be entity[i]'s element\r\n                    if (!entity2element[i]) {\r\n                        entity2element[i] = new Set()\r\n                    }\r\n                    entity2element[i].add(elementIndex)\r\n                }\r\n                // compare which elements of nldSwapped is same with nldBeforeSwap\r\n                // if (entityType == \"links\") debugger\r\n                indexofSwapDiff.forEach((elementJndex) => {\r\n                    if (\r\n                        elementIndex !== elementJndex &&\r\n                        object.isEqual(\r\n                            {\r\n                                style:\r\n                                    nldBeforeSwap.basicElementArray[\r\n                                        elementIndex\r\n                                    ].style,\r\n                                tagName:\r\n                                    nldBeforeSwap.basicElementArray[\r\n                                        elementIndex\r\n                                    ].tagName,\r\n                            },\r\n                            {\r\n                                style:\r\n                                    nldAfterSwap.basicElementArray[elementJndex]\r\n                                        .style,\r\n                                tagName:\r\n                                    nldAfterSwap.basicElementArray[elementJndex]\r\n                                        .tagName,\r\n                            }\r\n                        )\r\n                    ) {\r\n                        if (\r\n                            labelsOfElements[elementIndex] &&\r\n                            !labelsOfElements[elementJndex]\r\n                        ) {\r\n                            labelsOfElements[elementJndex] =\r\n                                labelsOfElements[elementIndex]\r\n                        } else if (\r\n                            !labelsOfElements[elementIndex] &&\r\n                            labelsOfElements[elementJndex]\r\n                        ) {\r\n                            labelsOfElements[elementIndex] =\r\n                                labelsOfElements[elementJndex]\r\n                        } else if (\r\n                            !labelsOfElements[elementIndex] &&\r\n                            !labelsOfElements[elementJndex]\r\n                        ) {\r\n                            labelsOfElements[elementIndex] = labelsOfElements[\r\n                                elementJndex\r\n                            ] = ++labelsOfElements.max\r\n                        } else {\r\n                            if (\r\n                                labelsOfElements[elementIndex] !=\r\n                                labelsOfElements[elementJndex]\r\n                            )\r\n                                debugger\r\n                        }\r\n                    }\r\n                })\r\n            })\r\n\r\n            // swap back\r\n            clonedGraph[entityType][i] = clonedGraph[entityType][entityIndex]\r\n            clonedGraph[entityType][entityIndex] = thisEntity\r\n            thisEntity = clonedGraph[entityType][i]\r\n        })\r\n    }\r\n    return [entity2element, labelsOfElements]\r\n}\r\n","function TitleBar({ text }) {\r\n    return (\r\n        <div\r\n            style={{\r\n                width: \"100vw\",\r\n                height: 60,\r\n                lineHeight: \"60px\",\r\n                borderBottom: \"1px solid #dfdfdf\",\r\n                fontFamily: \"Times\",\r\n                fontSize: 35,\r\n                fontWeight: \"600\",\r\n                textIndent: 30,\r\n                position: \"fixed\",\r\n                top: 0,\r\n                // zIndex: 1000,\r\n                backgroundColor: \"white\",\r\n            }}\r\n        >\r\n            {text ? text : \"Graph Descriptor\"}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport { TitleBar }\r\n","import { findSimiliarColor } from './color'\r\n\r\nfunction processValue(value) {\r\n    // 如果有@符号，变成方括号表达\r\n    if (typeof value === 'string' && value.includes('@')) {\r\n        value = value.replace(/@(.*)/g, (_, x) => { return `[${x}]` })\r\n    } else if (value === 'r') {\r\n        value = 'radius'\r\n    }\r\n    return value\r\n}\r\n\r\nexport function styleParameter(parameter) {\r\n    let type = ''\r\n    let value = ''\r\n    if (parameter.type) {\r\n        type = parameter.type\r\n        value = parameter.value\r\n    } else {\r\n        value = parameter\r\n    }\r\n\r\n    if (Array.isArray(value)) {\r\n        return value.map(\r\n            (_) => `<span class='description-parameter ${type}'>${processValue(_)}</span>`\r\n            // (_) => styleParameter(_)\r\n        )\r\n    }\r\n\r\n    value = processValue(value)\r\n\r\n    // 判断是颜色\r\n    if (/^#(?:[0-9a-fA-F]{3}){1,2}$/.test(value)) {\r\n        const name = findSimiliarColor(value)\r\n        return `<span class='description-parameter ${type}'>${name}(<span style='color: ${value};'>&#9724;</span>${value})</span>`\r\n    }\r\n\r\n    return `<span class='description-parameter ${type}'>${value}</span>`\r\n}","import React from \"react\"\r\nimport { Radio } from \"antd\"\r\n\r\nimport \"./Main.css\"\r\n\r\nimport { CodeEditorPanel } from \"./panels/CodeEditorPanel\"\r\nimport { DataEditorPanel } from \"./panels/DataEditorPanel\"\r\nimport { VisualizationPanel } from \"./panels/VisualizationPanel\"\r\nimport { VisualizationGivenDataPanel } from \"./panels/VisualizationGivenDataPanel\"\r\nimport { DescriptionPanel } from \"./panels/DescriptionPanel\"\r\nimport { getPreloadData } from \"./demo/demo\"\r\nimport { useEffect, useState } from \"react\"\r\nimport { useParams } from \"react-router\"\r\nimport { linkCondition } from \"./linkConditions/linkCondition\"\r\nimport descriptor from \"./descriptor\"\r\nimport * as d3 from \"d3\"\r\nimport { object, svgToArray } from \"./descriptor/utils\"\r\nimport { TitleBar } from \"./components/TitleBar\"\r\nimport { styleParameter } from \"./utils/parameterStyle\"\r\nimport { DescriptionLegendPanel } from \"./panels/DescriptionLegendPanel\"\r\n\r\nconst DESCRIPTIONS = \"DESCRIPTIONS\"\r\nconst TOOLTIPS = \"TOOLTIPS\"\r\nconst LEGENDS = \"LEGENDS\"\r\nconst TECHNIQUES = [DESCRIPTIONS, LEGENDS, TOOLTIPS]\r\n\r\nfunction Main({ title, nodeMeanings }) {\r\n    const [runID, setRunID] = useState(0)\r\n    const [loading, setLoading] = useState(false)\r\n    const [dataStr, setDataStr] = useState(\"\")\r\n    const [codeStr, setCodeStr] = useState(\"\")\r\n    const [SVG, setSVG] = useState(document.createElement(\"svg\"))\r\n    const [visibleElements, setVisibleElements] = useState([])\r\n    const [graphDescripitons, setGraphDescriptions] = useState({})\r\n    const [layoutDescriptions, setLayoutDescriptions] = useState([])\r\n    const [elementInfo, setElementInfo] = useState(null)\r\n    const [label2Encodings, setLabel2Encodings] = useState(null)\r\n    const [linkConditions, setLinkConditions] = useState([])\r\n    const [entityElementsGroups, setEntityElementsGroups] = useState({})\r\n    const [techniqueChoice, setTechniqueChoice] = useState(DESCRIPTIONS)\r\n\r\n    // read url parameters\r\n    const { demo } = useParams()\r\n    const [dataFolder, setDataFolder] = useState(\"\")\r\n\r\n    useEffect(() => {\r\n        if (demo) {\r\n            console.log(demo)\r\n            getPreloadData(demo).then(\r\n                ({ dataStr, codeStr, preload, dataFolder }) => {\r\n                    setDataStr(dataStr)\r\n                    setCodeStr(codeStr)\r\n                    setDataFolder(dataFolder)\r\n\r\n                    if (preload) {\r\n                        const _ = document.createElement(\"div\")\r\n                        _.innerHTML = preload.svg\r\n                        const svg = _.firstChild\r\n                        setSVG(svg)\r\n                        // 根据index更新elements\r\n\r\n                        const allElements = svgToArray(svg)\r\n                        const descriptions = preload.descriptions\r\n                        const layoutDescriptions = preload.layoutDescriptions\r\n                        const elementInfo = preload.elementInfo\r\n                        const label2Encodings = preload.label2Encodings\r\n\r\n                        descriptions.forEach((description) => {\r\n                            object.dfs(description, (desc) => {\r\n                                // desc.elements = undefined\r\n                                if (desc.elementsIdx) {\r\n                                    desc.elements = desc.elementsIdx.map(\r\n                                        (idx) => allElements[idx]\r\n                                    )\r\n                                }\r\n                            })\r\n                        })\r\n\r\n                        layoutDescriptions.forEach((description) => {\r\n                            object.dfs(description, (desc) => {\r\n                                // desc.elements = undefined\r\n                                if (desc.elementsIdx) {\r\n                                    desc.elements = desc.elementsIdx.map(\r\n                                        (idx) => allElements[idx]\r\n                                    )\r\n                                }\r\n                            })\r\n                        })\r\n\r\n                        // setLoading(false)\r\n                        setVisibleElements(allElements)\r\n                        setGraphDescriptions(descriptions)\r\n                        setLayoutDescriptions(layoutDescriptions)\r\n                        setLabel2Encodings(label2Encodings)\r\n                        setElementInfo(elementInfo)\r\n                    }\r\n                }\r\n            )\r\n        }\r\n    }, [demo])\r\n\r\n    useEffect(() => {\r\n        if (runID === 0) return\r\n        // async function fetchEncodingDescriptions() {\r\n        function fetchEncodingDescriptions() {\r\n            try {\r\n                const data = JSON.parse(dataStr)\r\n                let {\r\n                    svg,\r\n                    allElements,\r\n                    descriptions,\r\n                    layoutDescriptions,\r\n                    elementInfo,\r\n                    label2Encodings,\r\n                    // } = await descriptor(codeStr, data)\r\n                } = descriptor(codeStr, data)\r\n\r\n                // ///////// 用来存储计算出来得数据 //////////\r\n                const svgStr = new XMLSerializer().serializeToString(svg)\r\n\r\n                descriptions.forEach((description) => {\r\n                    object.dfs(description, (desc) => {\r\n                        delete desc.elements\r\n                        desc.content = desc.template(\r\n                            ...desc.parameters.map(styleParameter)\r\n                        )\r\n                    })\r\n                })\r\n\r\n                layoutDescriptions.forEach((description) => {\r\n                    object.dfs(description, (desc) => {\r\n                        delete desc.elements\r\n                        desc.content = desc.template(\r\n                            ...desc.parameters.map(styleParameter)\r\n                        )\r\n                    })\r\n                })\r\n\r\n                const preloadData = {\r\n                    svg: svgStr,\r\n                    descriptions,\r\n                    layoutDescriptions,\r\n                    elementInfo,\r\n                    label2Encodings,\r\n                }\r\n                console.log(JSON.stringify(preloadData))\r\n                ///////// 计算代码结束 ////////\r\n\r\n                descriptions.forEach((description) => {\r\n                    object.dfs(description, (desc) => {\r\n                        desc.content = desc.template(\r\n                            ...desc.parameters.map(styleParameter)\r\n                        )\r\n                        if (desc.elementsIdx) {\r\n                            desc.elements = desc.elementsIdx.map(\r\n                                (idx) => allElements[idx]\r\n                            )\r\n                        }\r\n                    })\r\n                })\r\n\r\n                layoutDescriptions.forEach((description) => {\r\n                    object.dfs(description, (desc) => {\r\n                        desc.content = desc.template(\r\n                            ...desc.parameters.map(styleParameter)\r\n                        )\r\n                        if (desc.elementsIdx) {\r\n                            desc.elements = desc.elementsIdx.map(\r\n                                (idx) => allElements[idx]\r\n                            )\r\n                        }\r\n                    })\r\n                })\r\n\r\n                setSVG(svg)\r\n                setVisibleElements(allElements)\r\n                setGraphDescriptions(descriptions)\r\n                setLayoutDescriptions(layoutDescriptions)\r\n                setElementInfo(elementInfo)\r\n                setLabel2Encodings(label2Encodings)\r\n                setLoading(false)\r\n            } catch (e) {\r\n                console.error(\"invalid code or dataset.\")\r\n                console.error(e)\r\n            }\r\n        }\r\n        fetchEncodingDescriptions()\r\n    }, [runID])\r\n\r\n    useEffect(() => {\r\n        try {\r\n            const conditions = linkCondition(JSON.parse(dataStr), 0.8)\r\n            setLinkConditions(conditions)\r\n        } catch (e) {\r\n            console.error(\"Invalid dataset\")\r\n            setLinkConditions([])\r\n        }\r\n    }, [dataStr])\r\n\r\n    useEffect(() => {\r\n        if (SVG && elementInfo) {\r\n            const entityElementsGroups = { node: [], link: [] }\r\n            elementInfo.forEach((info) => {\r\n                if (\r\n                    info &&\r\n                    !entityElementsGroups[info.entityType][info.entityIndex]\r\n                ) {\r\n                    // get all elements related to this entity\r\n                    const newSvg = SVG.cloneNode(true)\r\n                    object.dfs(newSvg, function (element) {\r\n                        const _idx = parseInt(element.getAttribute(\"idx\"))\r\n                        if (!isNaN(_idx)) {\r\n                            const _info = elementInfo[_idx]\r\n                            if (\r\n                                !_info ||\r\n                                _info.entityIndex !== info.entityIndex ||\r\n                                _info.entityType !== info.entityType\r\n                            ) {\r\n                                element.remove()\r\n                            }\r\n                        }\r\n                    })\r\n                    document.body.appendChild(newSvg)\r\n                    const bbox = newSvg.getBBox()\r\n                    document.body.removeChild(newSvg)\r\n                    const entityElementsGroup = document.createElement(\"g\")\r\n                    Array.from(newSvg.children).forEach((child) => {\r\n                        entityElementsGroup.appendChild(child)\r\n                    })\r\n\r\n                    entityElementsGroups[info.entityType][info.entityIndex] = {\r\n                        group: entityElementsGroup,\r\n                        bbox,\r\n                    }\r\n                }\r\n            })\r\n            Object.keys(entityElementsGroups).forEach((key) => {\r\n                entityElementsGroups[key].maxBBox = entityElementsGroups[\r\n                    key\r\n                ].reduce(\r\n                    (r, e) => {\r\n                        r.width = Math.max(r.width, e.bbox.width)\r\n                        r.height = Math.max(r.height, e.bbox.height)\r\n                        return r\r\n                    },\r\n                    { width: 0, height: 0 }\r\n                )\r\n            })\r\n\r\n            setEntityElementsGroups(entityElementsGroups)\r\n        }\r\n    }, [SVG, elementInfo])\r\n\r\n    if (dataStr) {\r\n        const data = JSON.parse(dataStr)\r\n        // console.log(data)\r\n        // console.log(graphDescripitons)\r\n    }\r\n\r\n    return (\r\n        <div style={{}}>\r\n            <TitleBar text={title} />\r\n            <div\r\n                style={{\r\n                    width: \"95vw\",\r\n                    maxWidth: 1800,\r\n                    minWidth: 1400,\r\n                    position: \"absolute\",\r\n                    left: \"50%\",\r\n                    transform: \"translate(-50%)\",\r\n                    marginTop: 70,\r\n                    paddingLeft: \"2.5vw\",\r\n                    paddingBottom: 70,\r\n                    // height: \"calc(100vh - 80px)\",\r\n                    display: \"flex\",\r\n                    flexDirection: \"raw\",\r\n                }}\r\n            >\r\n                <div\r\n                    id=\"left-container\"\r\n                    style={{\r\n                        flex: 1,\r\n                        height: \"95vh\",\r\n                        overflowY: \"scroll\",\r\n                        position: \"relative\",\r\n                    }}\r\n                >\r\n                    {/* <div\r\n                        style={{\r\n                            float: \"right\",\r\n                            marginRight: 310,\r\n                        }}\r\n                    >\r\n                        <Radio.Group\r\n                            style={{ position: \"fixed\", zIndex: 1000 }}\r\n                            options={TECHNIQUES.map((t) => ({\r\n                                label: t,\r\n                                value: t,\r\n                            }))}\r\n                            onChange={(e) => setTechniqueChoice(e.target.value)}\r\n                            value={techniqueChoice}\r\n                            optionType=\"button\"\r\n                        />\r\n                    </div> */}\r\n                    <VisualizationGivenDataPanel\r\n                        style={{\r\n                            margin: 5,\r\n                        }}\r\n                        dataFolder={dataFolder}\r\n                        svg={SVG}\r\n                        dataStr={dataStr}\r\n                        elementInfo={elementInfo}\r\n                        layoutDescriptions={layoutDescriptions}\r\n                        label2Encodings={label2Encodings}\r\n                        linkConditions={linkConditions}\r\n                        entityElementsGroups={entityElementsGroups}\r\n                        visibleElements={visibleElements}\r\n                        nodeMeanings={nodeMeanings}\r\n                        // switchedOn={techniqueChoice === TOOLTIPS}\r\n                    />\r\n                    <CodeEditorPanel\r\n                        codeStr={codeStr}\r\n                        setCodeStr={setCodeStr}\r\n                        submit={() => {\r\n                            setLoading(true)\r\n                            setRunID(runID + 1)\r\n                        }}\r\n                        style={{}}\r\n                    />\r\n                    <DataEditorPanel\r\n                        dataStr={dataStr}\r\n                        setDataStr={setDataStr}\r\n                        style={{}}\r\n                    />\r\n                </div>\r\n                <div\r\n                    id=\"right-container\"\r\n                    style={{\r\n                        flex: 1,\r\n                        height: \"95vh\",\r\n                        overflowY: \"scroll\",\r\n                        display: `${\r\n                            techniqueChoice === LEGENDS ||\r\n                            techniqueChoice === DESCRIPTIONS\r\n                                ? \"\"\r\n                                : \"none\"\r\n                        }`,\r\n                    }}\r\n                >\r\n                    {/* <DescriptionLegendPanel\r\n                        dataFolder={dataFolder}\r\n                        dataStr={dataStr}\r\n                        elementInfo={elementInfo}\r\n                        loading={loading}\r\n                        linkConditions={linkConditions}\r\n                        graphDescriptions={graphDescripitons}\r\n                        layoutDescriptions={layoutDescriptions}\r\n                        entityElementsGroups={entityElementsGroups}\r\n                        visibleElements={visibleElements}\r\n                        nodeMeanings={nodeMeanings}\r\n                        SVG={SVG}\r\n                        switchedOn={techniqueChoice === LEGENDS}\r\n                    /> */}\r\n                    <DescriptionPanel\r\n                        loading={loading}\r\n                        elementInfo={elementInfo}\r\n                        linkConditions={linkConditions}\r\n                        graphDescriptions={graphDescripitons}\r\n                        layoutDescriptions={layoutDescriptions}\r\n                        visibleElements={visibleElements}\r\n                        nodeMeanings={nodeMeanings}\r\n                        switchedOn={techniqueChoice === DESCRIPTIONS}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport { Main }\r\n","/* eslint-disable no-loop-func */\r\n/**\r\n * @create date 2021-02-20 13:08:16\r\n * @modify date 2021-02-20 13:08:16\r\n * @desc entry of the repo\r\n */\r\nimport * as d3 from \"d3\"\r\nimport { mapEntity2Element, mapAttribute2Channel } from \"./entity2element\"\r\nimport { NLDComponents } from \"./NLDComponents\"\r\nimport {\r\n    BASIC_SVG_ELEMENTS,\r\n    COMMON_STYLE_CHANNELS,\r\n    COMMON_POSITION_CHANNELS,\r\n    DESCRIPTION_TEMPLATE,\r\n    PARAMETER_TYPE,\r\n} from \"./global\"\r\nimport {\r\n    NoLinDiagram,\r\n    number2ordinal,\r\n    object,\r\n    textualizeStringArray,\r\n} from \"./utils\"\r\nimport {\r\n    attributeRelation,\r\n    layoutRelation,\r\n} from \"../attributeRelation/attributeRelation\"\r\nimport { BACKEND_URL } from \"../configs\"\r\n\r\n/**\r\n *\r\n * @param {string} code\r\n * @param {standard node-link data format} data\r\n */\r\n// export default async function descriptor(code, oridata) {\r\nexport default function descriptor(code, oridata, threshold = 0.6) {\r\n    // only keep string number undefined boolean array\r\n    const data = object.deepcopy(oridata)\r\n    const beginTime = performance.now()\r\n    // eslint-disable-next-line no-new-func\r\n    const func = new Function(\"d3\", \"data\", code)\r\n    const svg = func(d3, object.deepcopy(data))\r\n    const nldComponents = new NLDComponents(svg)\r\n\r\n    // Step1: Map Entities to Elements, Map Attributes to Channels\r\n    // entity2element: [[entityIndex]: Set(elementIndex)]\r\n    console.log(\r\n        `%c Computing nodes' encodings...`,\r\n        \"background: #222; color: #bada55\"\r\n    )\r\n    console.log(\r\n        `%c Computing links' encodings...`,\r\n        \"background: #222; color: #bada55\"\r\n    )\r\n\r\n    let [node2element, nodeElement2label] = mapEntity2Element(\r\n        data,\r\n        func,\r\n        \"nodes\"\r\n    )\r\n\r\n    let [link2element, linkElement2label] = mapEntity2Element(\r\n        data,\r\n        func,\r\n        \"links\"\r\n    )\r\n\r\n    // Step2: Remove Links' elements from node results\r\n    // if link2element shares same elements with node2element,\r\n    // we should remove them from node2element\r\n    const element2link = []\r\n    for (let i = 0; i < link2element.length; i++) {\r\n        link2element[i]?.forEach((elementIndex) => {\r\n            if (element2link[elementIndex] !== undefined) {\r\n                // one element cannot correspond to several links\r\n                debugger\r\n            }\r\n            element2link[elementIndex] = i\r\n        })\r\n    }\r\n\r\n    // Remove link2element from node2element\r\n    for (let i = 0; i < node2element.length; i++) {\r\n        // i: nodeIndex\r\n        const node2element_i = new Set()\r\n        node2element[i]?.forEach((elementIndex) => {\r\n            if (element2link[elementIndex] === undefined) {\r\n                // the element does not correspond to a link, add it to node2element\r\n                node2element_i.add(elementIndex)\r\n            } else {\r\n                delete nodeElement2label[elementIndex]\r\n            }\r\n        })\r\n        node2element[i] = node2element_i\r\n    }\r\n\r\n    let linkElements = new Set()\r\n    link2element.forEach((linkset) => {\r\n        linkset.forEach((elementIndex) => {\r\n            linkElements.add(elementIndex)\r\n        })\r\n    })\r\n\r\n    node2element.forEach((nodeset) => {\r\n        nodeset.forEach((elementIndex) => {\r\n            if (linkElements.has(elementIndex)) {\r\n                debugger\r\n            }\r\n        })\r\n    })\r\n\r\n    // const nodeLabel2attr2diff = await mapAttribute2Channel(\r\n    const nodeLabel2attr2diff = mapAttribute2Channel(\r\n        data,\r\n        func,\r\n        \"nodes\",\r\n        node2element,\r\n        nodeElement2label\r\n    )\r\n\r\n    // const linkLabel2attr2diff = await mapAttribute2Channel(\r\n    const linkLabel2attr2diff = mapAttribute2Channel(\r\n        data,\r\n        func,\r\n        \"links\",\r\n        link2element,\r\n        linkElement2label\r\n    )\r\n\r\n    // Step3: Generate Descriptions about Visual Encodings\r\n    let descriptions = []\r\n    const configs = [\r\n        {\r\n            entityType: \"node\",\r\n            entity2element: node2element,\r\n            element2label: nodeElement2label,\r\n            label2attr2diff: nodeLabel2attr2diff,\r\n        },\r\n        {\r\n            entityType: \"link\",\r\n            entity2element: link2element,\r\n            element2label: linkElement2label,\r\n            label2attr2diff: linkLabel2attr2diff,\r\n        },\r\n    ]\r\n    console.log(configs)\r\n    configs.forEach(\r\n        ({ entityType, entity2element, element2label, label2attr2diff }) => {\r\n            // Step3.1: Generate Constituents, e.g. A node can consist of 4 elements\r\n            // const numberOfElementsEachEntity = entity2element[0].size\r\n            let numberOfLabels = Object.keys(label2attr2diff).length\r\n            // find related elements: all elements of nodes/links are related\r\n            let relatedElements = []\r\n            let relatedElementsIdx = []\r\n            entity2element.forEach((elementSet) => {\r\n                if (elementSet) {\r\n                    elementSet.forEach((elementIndex) => {\r\n                        relatedElementsIdx.push(elementIndex)\r\n                        relatedElements.push(\r\n                            nldComponents.basicElementArray[elementIndex]\r\n                                .element\r\n                        )\r\n                    })\r\n                }\r\n            })\r\n\r\n            let descrpitionSentence = {\r\n                template: DESCRIPTION_TEMPLATE.constituent(\r\n                    entityType,\r\n                    numberOfLabels\r\n                ),\r\n                parameters: [\r\n                    {\r\n                        type: PARAMETER_TYPE.entity,\r\n                        value: entityType,\r\n                    },\r\n                    {\r\n                        type: PARAMETER_TYPE.value,\r\n                        value: numberOfLabels,\r\n                    },\r\n                ],\r\n                elements: relatedElements,\r\n                elementsIdx: relatedElementsIdx,\r\n                switch: true,\r\n                children: [],\r\n            }\r\n\r\n            descriptions.push(descrpitionSentence)\r\n\r\n            // Step3.2: Vertical Grouping\r\n            const classes = {}\r\n            const label2class = {}\r\n            for (let label in label2attr2diff) {\r\n                const attr2diff = label2attr2diff[label]\r\n                const className = JSON.stringify(attr2diff)\r\n                classes[className] = classes[className] ?? new Set()\r\n                classes[className].add(label)\r\n                label2class[label] = className\r\n            }\r\n\r\n            // Step3.3: Generate Encoding Descriptions for each Category\r\n            let i = 1\r\n            for (let label in label2attr2diff) {\r\n                const relatedElementsIdx = element2label\r\n                    .map((l, eleIndex) => {\r\n                        // eslint-disable-next-line eqeqeq\r\n                        if (l == label) {\r\n                            return eleIndex\r\n                        } else {\r\n                            return undefined\r\n                        }\r\n                    })\r\n                    .filter((_) => _ !== undefined)\r\n                const relatedElements = element2label\r\n                    .map((l, eleIndex) => {\r\n                        // eslint-disable-next-line eqeqeq\r\n                        if (l == label) {\r\n                            return nldComponents.basicElementArray[eleIndex]\r\n                                .element\r\n                        } else {\r\n                            return undefined\r\n                        }\r\n                    })\r\n                    .filter((_) => _)\r\n\r\n                const attr2diff = label2attr2diff[label]\r\n                let tagNames = Array.from(\r\n                    new Set(\r\n                        element2label\r\n                            .map((l, eleIndex) => {\r\n                                // eslint-disable-next-line eqeqeq\r\n                                if (l == label) {\r\n                                    return nldComponents.basicElementArray[\r\n                                        eleIndex\r\n                                    ].tagName\r\n                                } else {\r\n                                    return undefined\r\n                                }\r\n                            })\r\n                            .filter((_) => _)\r\n                    )\r\n                ).sort()\r\n\r\n                if (tagNames.length === 1) {\r\n                    const elementDescription = {\r\n                        template:\r\n                            DESCRIPTION_TEMPLATE.onePrimitive(numberOfLabels), // e.g., The first element is a rect\r\n                        parameters: [\r\n                            number2ordinal(i),\r\n                            {\r\n                                type: PARAMETER_TYPE.element,\r\n                                value: `&lt;${tagNames[0]}&gt;`,\r\n                            },\r\n                        ],\r\n                        elements: relatedElements,\r\n                        elementsIdx: relatedElementsIdx,\r\n                        switch: true,\r\n                        children: [],\r\n                    }\r\n                    descrpitionSentence.children.push(elementDescription)\r\n\r\n                    elementDescription.children = genDescsForAttr2Diff(\r\n                        Object.entries(attr2diff),\r\n                        relatedElements,\r\n                        relatedElementsIdx\r\n                    )\r\n                    console.log(attr2diff)\r\n                    console.log(elementDescription)\r\n                } else if (tagNames.length > 1) {\r\n                    const tagNameChoiceDescriptions = {\r\n                        template:\r\n                            DESCRIPTION_TEMPLATE.multiPrimitive(numberOfLabels),\r\n                        parameters: [\r\n                            number2ordinal(i),\r\n                            {\r\n                                type: PARAMETER_TYPE.element,\r\n                                value: tagNames.map(\r\n                                    (tagName) => `&lt;${tagName}&gt;`\r\n                                ),\r\n                            },\r\n                        ],\r\n                        elements: relatedElements,\r\n                        elementsIdx: relatedElementsIdx,\r\n                        switch: true,\r\n                        children: [],\r\n                    }\r\n                    descrpitionSentence.children.push(tagNameChoiceDescriptions)\r\n\r\n                    const tagName2attr2val = {}\r\n                    const attr2diffEntriesWithCommonStyle = Object.entries(\r\n                        attr2diff\r\n                    ).reduce((result, [attrName, diff]) => {\r\n                        if (diff.tagName) {\r\n                            if (diff.tagName.typeX === \"categorical\") {\r\n                                for (let tagName in diff.tagName\r\n                                    .attributeMapping) {\r\n                                    tagName2attr2val[tagName] =\r\n                                        tagName2attr2val[tagName] ?? {\r\n                                            attrName,\r\n                                        }\r\n                                    tagName2attr2val[tagName].attrVal =\r\n                                        tagName2attr2val[tagName].attrVal ??\r\n                                        new Set()\r\n                                    diff.tagName.attributeMapping[\r\n                                        tagName\r\n                                    ].forEach((val) => {\r\n                                        tagName2attr2val[tagName].attrVal.add(\r\n                                            val\r\n                                        )\r\n                                    })\r\n                                }\r\n                            } else {\r\n                                for (let tagName in diff.tagName\r\n                                    .attributeMapping) {\r\n                                    tagName2attr2val[tagName] =\r\n                                        tagName2attr2val[tagName] ?? {\r\n                                            attrName,\r\n                                        }\r\n                                    tagName2attr2val[tagName].attrVal =\r\n                                        tagName2attr2val[tagName].attrVal ?? {\r\n                                            max: -Infinity,\r\n                                            min: Infinity,\r\n                                        }\r\n                                    tagName2attr2val[tagName].attrVal.max =\r\n                                        Math.max(\r\n                                            tagName2attr2val[tagName].attrVal\r\n                                                .max,\r\n                                            Number(\r\n                                                diff.tagName.attributeMapping\r\n                                                    .max\r\n                                            )\r\n                                        )\r\n                                    tagName2attr2val[tagName].attrVal.min =\r\n                                        Math.min(\r\n                                            tagName2attr2val[tagName].attrVal\r\n                                                .min,\r\n                                            Number(\r\n                                                diff.tagName.attributeMapping\r\n                                                    .min\r\n                                            )\r\n                                        )\r\n                                }\r\n                            }\r\n                        }\r\n                        const commonStyleDiff = {}\r\n                        if (diff.style) {\r\n                            for (let channel in diff.style) {\r\n                                if (\r\n                                    COMMON_STYLE_CHANNELS.has(channel) &&\r\n                                    diff.style[channel]\r\n                                ) {\r\n                                    commonStyleDiff.style =\r\n                                        commonStyleDiff.style ?? {}\r\n                                    commonStyleDiff.style[channel] =\r\n                                        diff.style[channel]\r\n                                }\r\n                            }\r\n                        }\r\n                        if (Object.keys(commonStyleDiff).length) {\r\n                            result.push([attrName, commonStyleDiff])\r\n                        }\r\n                        // if (!diff.tagName) {\r\n                        //     if (diff.style) {\r\n                        //         const _diff = {}\r\n                        //         for (let channel in diff.style) {\r\n                        //             if (COMMON_STYLE_CHANNELS.has(channel)) {\r\n                        //                 _diff.style = _diff.style ?? {}\r\n                        //                 _diff.style[channel] = true\r\n                        //             }\r\n                        //         }\r\n                        //         if (_diff.style) {\r\n                        //             result.push([attrName, _diff])\r\n                        //         }\r\n                        //     }\r\n                        // } else {\r\n                        //     result.push([attrName, { tagName: true }])\r\n                        // }\r\n                        return result\r\n                    }, [])\r\n\r\n                    // attr2diffEntriesWithCommonStyle.forEach(\r\n                    //     ([attrName, diff]) => {\r\n                    //         const channels = []\r\n                    //         if (diff.tagName) {\r\n                    //             channels.push(\"tagName\")\r\n                    //         }\r\n                    //         if (diff.style) {\r\n                    //             Object.entries(diff.style).forEach(\r\n                    //                 ([channel, bool]) => {\r\n                    //                     if (bool) {\r\n                    //                         channels.push(\r\n                    //                             `\"${channel.split(\".\")[0]}\"`\r\n                    //                         )\r\n                    //                     }\r\n                    //                 }\r\n                    //             )\r\n                    //         }\r\n                    //         descrpitionSentence.children.push({\r\n                    //             template: DESCRIPTION_TEMPLATE.channels2attribute(),\r\n                    //             parameters: [channels, attrName],\r\n                    //             elements: relatedElements,\r\n                    //             switch: false,\r\n                    //             children: [],\r\n                    //         })\r\n                    //     }\r\n                    // )\r\n                    genDescsForAttr2Diff(\r\n                        attr2diffEntriesWithCommonStyle,\r\n                        relatedElements,\r\n                        relatedElementsIdx\r\n                    ).forEach((desc) => {\r\n                        descrpitionSentence.children.push(desc)\r\n                    })\r\n\r\n                    tagNames.forEach((tagName) => {\r\n                        const thisTagNameRelatedElements =\r\n                            relatedElements.filter(\r\n                                (element) => element.tagName === tagName\r\n                            )\r\n                        const thisTagNameRelatedElementsIdx =\r\n                            relatedElementsIdx.filter(\r\n                                (idx, i) =>\r\n                                    relatedElements[i].tagName === tagName\r\n                            )\r\n                        // TODO: tagName2attr2val\r\n                        // multiPrimitiveTagName: (attrName, attrVals, tagName) => {}\r\n                        const valueArrayOfAttributesControlsThisTag =\r\n                            \"max\" in tagName2attr2val[tagName].attrVal &&\r\n                            \"min\" in tagName2attr2val[tagName].attrVal\r\n                                ? [\r\n                                      tagName2attr2val[tagName].attrVal.min,\r\n                                      tagName2attr2val[tagName].attrVal.max,\r\n                                  ]\r\n                                : Array.from(tagName2attr2val[tagName].attrVal)\r\n                        const thisTagNameDescriptions = {\r\n                            template:\r\n                                DESCRIPTION_TEMPLATE.multiPrimitiveTagName(\r\n                                    tagName2attr2val[tagName].attrVal\r\n                                ),\r\n                            parameters: [\r\n                                {\r\n                                    // tagName\r\n                                    type: PARAMETER_TYPE.element,\r\n                                    value: `&lt;${tagName}&gt;`,\r\n                                },\r\n                                {\r\n                                    // attrName\r\n                                    type: PARAMETER_TYPE.attribute,\r\n                                    value: tagName2attr2val[tagName].attrName,\r\n                                },\r\n                                ...valueArrayOfAttributesControlsThisTag.map(\r\n                                    (value) => ({\r\n                                        // attrVal\r\n                                        type: PARAMETER_TYPE.value,\r\n                                        value,\r\n                                    })\r\n                                ),\r\n                            ],\r\n                            elements: thisTagNameRelatedElements,\r\n                            elementsIdx: thisTagNameRelatedElementsIdx,\r\n                            switch: true,\r\n                            children: [],\r\n                        }\r\n\r\n                        tagNameChoiceDescriptions.children.push(\r\n                            thisTagNameDescriptions\r\n                        )\r\n\r\n                        const attr2diffEntriesWithThisTag = Object.entries(\r\n                            attr2diff\r\n                        ).reduce((result, [attrName, diff]) => {\r\n                            const thisTagDiff = {}\r\n                            if (diff.style) {\r\n                                for (let channel in diff.style) {\r\n                                    if (channel.split(\".\")[1] === tagName) {\r\n                                        channel = channel.split(\".\")[0]\r\n                                    }\r\n                                    if (\r\n                                        BASIC_SVG_ELEMENTS.get(tagName).has(\r\n                                            channel\r\n                                        ) &&\r\n                                        !COMMON_STYLE_CHANNELS.has(channel)\r\n                                    ) {\r\n                                        thisTagDiff.style =\r\n                                            thisTagDiff.style ?? {}\r\n                                        thisTagDiff.style[channel] =\r\n                                            diff.style[channel]\r\n                                    }\r\n                                }\r\n                            }\r\n                            if (Object.keys(thisTagDiff).length) {\r\n                                result.push([attrName, thisTagDiff])\r\n                            }\r\n                            // if (!diff.tagName) {\r\n                            //     if (diff.style) {\r\n                            //         const _diff = {}\r\n                            //         for (let channel in diff.style) {\r\n                            //             if (channel.split(\".\")[1] === tagName) {\r\n                            //                 channel = channel.split(\".\")[0]\r\n                            //             }\r\n                            //             if (\r\n                            //                 BASIC_SVG_ELEMENTS.get(tagName).has(\r\n                            //                     channel\r\n                            //                 ) &&\r\n                            //                 !COMMON_STYLE_CHANNELS.has(channel)\r\n                            //             ) {\r\n                            //                 _diff.style = _diff.style ?? {}\r\n                            //                 _diff.style[channel] = true\r\n                            //             }\r\n                            //             // if (\r\n                            //             //     [\r\n                            //             //         COMMON_POSITION_CHANNELS.get(\r\n                            //             //             tagName\r\n                            //             //         ),\r\n                            //             //         BASIC_SVG_ELEMENTS.get(tagName),\r\n                            //             //     ].some(\r\n                            //             //         (channels) =>\r\n                            //             //             channels.has(channel) ||\r\n                            //             //             (channel.split(\".\")[1] ==\r\n                            //             //                 tagName &&\r\n                            //             //                 channels.has(\r\n                            //             //                     channel.split(\r\n                            //             //                         \".\"\r\n                            //             //                     )[0]\r\n                            //             //                 ))\r\n                            //             //     )\r\n                            //             // ) {\r\n                            //             //     _diff.style = _diff.style ?? {}\r\n                            //             //     _diff.style[channel] = true\r\n                            //             // }\r\n                            //         }\r\n                            //         if (_diff.style) {\r\n                            //             result.push([attrName, _diff])\r\n                            //         }\r\n                            //     }\r\n                            // }\r\n                            return result\r\n                        }, [])\r\n\r\n                        thisTagNameDescriptions.children = genDescsForAttr2Diff(\r\n                            attr2diffEntriesWithThisTag,\r\n                            thisTagNameRelatedElements,\r\n                            thisTagNameRelatedElementsIdx\r\n                        )\r\n                        // attr2diffEntriesWithThisTag.forEach(\r\n                        //     ([attrName, diff], j) => {\r\n                        //         const channels = []\r\n                        //         if (diff.style) {\r\n                        //             Object.entries(diff.style).forEach(\r\n                        //                 ([channel, bool]) => {\r\n                        //                     if (bool) {\r\n                        //                         channels.push(\r\n                        //                             `\"${channel.split(\".\")[0]}\"`\r\n                        //                         )\r\n                        //                     }\r\n                        //                 }\r\n                        //             )\r\n                        //         }\r\n                        //         thisTagNameDescriptions.children.push({\r\n                        //             template: DESCRIPTION_TEMPLATE.channels2attribute(\r\n                        //                 /*isfirstWordUpper*/ j !== 0\r\n                        //             ),\r\n                        //             parameters: [channels, attrName],\r\n                        //             elements: thisTagNameRelatedElements,\r\n                        //             switch: false,\r\n                        //             children: [],\r\n                        //         })\r\n                        //     }\r\n                        // )\r\n                    })\r\n                }\r\n\r\n                i++\r\n            }\r\n        }\r\n    )\r\n\r\n    console.log(descriptions)\r\n\r\n    function genDescsForAttr2Diff(\r\n        attr2diffEntries,\r\n        relatedElements,\r\n        relatedElementsIdx\r\n    ) {\r\n        const result = []\r\n        attr2diffEntries.forEach(([attrName, diff]) => {\r\n            const channels = []\r\n            if (diff.tagName) {\r\n                channels.push(\"tagName\")\r\n            }\r\n            if (diff.style) {\r\n                Object.entries(diff.style).forEach(([channel, bool]) => {\r\n                    if (bool) {\r\n                        channels.push(`${channel.split(\".\")[0]}`)\r\n                    }\r\n                })\r\n            }\r\n\r\n            // Generate correlations\r\n            channels.forEach((channel) => {\r\n                let relation\r\n                if (channel === \"tagName\") {\r\n                    relation = diff.tagName\r\n                } else {\r\n                    relation = diff.style[channel]\r\n                }\r\n\r\n                let encodingDetailDescription = {\r\n                    template: DESCRIPTION_TEMPLATE.channels2attribute(), // Its fill encodes the attribute xxx.\r\n                    parameters: [\r\n                        {\r\n                            type: PARAMETER_TYPE.channel,\r\n                            value: [channel],\r\n                        },\r\n                        {\r\n                            type: PARAMETER_TYPE.attribute,\r\n                            value: attrName,\r\n                        },\r\n                    ],\r\n                    elements: relatedElements,\r\n                    elementsIdx: relatedElementsIdx,\r\n                    switch: false,\r\n                    children: [],\r\n                }\r\n                if (relation && relation !== true) {\r\n                    // For numerical to numerical: describe the kendall test\r\n                    if (\r\n                        relation.typeX === \"numerical\" &&\r\n                        relation.typeY === \"numerical\" &&\r\n                        // relation.kendall.pvalue <= 0.05\r\n                        Math.abs(relation.correlation) > threshold\r\n                    ) {\r\n                        // more...more...\r\n                        encodingDetailDescription.children.push({\r\n                            template: DESCRIPTION_TEMPLATE.correlationN2N(\r\n                                // relation.pearson.correlation > 0\r\n                                relation.correlation > 0\r\n                            ), // Its fill encodes the attribute xxx.\r\n                            parameters: [\r\n                                {\r\n                                    type: PARAMETER_TYPE.channel,\r\n                                    value: channel,\r\n                                },\r\n                                {\r\n                                    type: PARAMETER_TYPE.attribute,\r\n                                    value: attrName,\r\n                                },\r\n                            ],\r\n                            elements: relatedElements,\r\n                            elementsIdx: relatedElementsIdx,\r\n                        })\r\n                    } else if (\r\n                        relation.typeX === \"numerical\" &&\r\n                        relation.typeY === \"categorical\"\r\n                    ) {\r\n                        Object.entries(relation.attributeMapping).forEach(\r\n                            ([chanVal, attrVals]) => {\r\n                                encodingDetailDescription.children.push({\r\n                                    template:\r\n                                        DESCRIPTION_TEMPLATE.correlationN2C, // `When the value of the attribute ${attrName} is from ... to ..., its ${chanName} turns to ${chanVal}.`\r\n                                    parameters: [\r\n                                        {\r\n                                            type: PARAMETER_TYPE.channel,\r\n                                            value: channel,\r\n                                        },\r\n                                        {\r\n                                            type: PARAMETER_TYPE.attribute,\r\n                                            value: attrName,\r\n                                        },\r\n                                        {\r\n                                            type: PARAMETER_TYPE.value,\r\n                                            value: chanVal,\r\n                                        },\r\n                                        {\r\n                                            type: PARAMETER_TYPE.value,\r\n                                            value: attrVals.min,\r\n                                        },\r\n                                        {\r\n                                            type: PARAMETER_TYPE.value,\r\n                                            value: attrVals.max,\r\n                                        },\r\n                                    ],\r\n                                    elements: relatedElements.filter(\r\n                                        (element) => {\r\n                                            if (channel !== \"tagName\") {\r\n                                                if (channel === \"textContent\") {\r\n                                                    return (\r\n                                                        element.textContent ===\r\n                                                        chanVal\r\n                                                    )\r\n                                                }\r\n                                                return (\r\n                                                    element.attributes[channel]\r\n                                                        .value == chanVal\r\n                                                )\r\n                                            } else {\r\n                                                return (\r\n                                                    element.tagName == chanVal\r\n                                                )\r\n                                            }\r\n                                        }\r\n                                    ),\r\n                                    elementsIdx: relatedElementsIdx.filter(\r\n                                        (idx, i) => {\r\n                                            if (channel !== \"tagName\") {\r\n                                                if (channel === \"textContent\") {\r\n                                                    return (\r\n                                                        relatedElements[i]\r\n                                                            .textContent ===\r\n                                                        chanVal\r\n                                                    )\r\n                                                }\r\n                                                return (\r\n                                                    relatedElements[i]\r\n                                                        .attributes[channel]\r\n                                                        .value == chanVal\r\n                                                )\r\n                                            } else {\r\n                                                return (\r\n                                                    relatedElements[i]\r\n                                                        .tagName == chanVal\r\n                                                )\r\n                                            }\r\n                                        }\r\n                                    ),\r\n                                })\r\n                            }\r\n                        )\r\n                    } else if (\r\n                        relation.typeX === \"categorical\" &&\r\n                        relation.typeY === \"categorical\" &&\r\n                        relation.attributeMapping\r\n                    ) {\r\n                        Object.entries(relation.attributeMapping).forEach(\r\n                            ([chanVal, attrVals]) => {\r\n                                encodingDetailDescription.children.push({\r\n                                    template:\r\n                                        DESCRIPTION_TEMPLATE.correlationC2C, // `When the value of the attribute ${attrName} is ${textualizeStringArray( attrVals, \"or\" )}, its ${chanName} turns to ${chanVal}.`\r\n                                    parameters: [\r\n                                        {\r\n                                            type: PARAMETER_TYPE.channel,\r\n                                            value: channel,\r\n                                        },\r\n                                        {\r\n                                            type: PARAMETER_TYPE.attribute,\r\n                                            value: attrName,\r\n                                        },\r\n                                        {\r\n                                            type: PARAMETER_TYPE.value,\r\n                                            value: chanVal,\r\n                                        },\r\n                                        {\r\n                                            type: PARAMETER_TYPE.value,\r\n                                            value: attrVals,\r\n                                        },\r\n                                    ],\r\n                                    elements: relatedElements.filter(\r\n                                        (element) => {\r\n                                            if (channel !== \"tagName\") {\r\n                                                if (channel === \"textContent\") {\r\n                                                    return (\r\n                                                        element.textContent ===\r\n                                                        chanVal\r\n                                                    )\r\n                                                } else {\r\n                                                    return (\r\n                                                        element.attributes[\r\n                                                            channel\r\n                                                        ].value === chanVal\r\n                                                    )\r\n                                                }\r\n                                            } else {\r\n                                                return (\r\n                                                    element.tagName === chanVal\r\n                                                )\r\n                                            }\r\n                                        }\r\n                                    ),\r\n                                    elementsIdx: relatedElementsIdx.filter(\r\n                                        (idx, i) => {\r\n                                            if (channel !== \"tagName\") {\r\n                                                if (channel === \"textContent\") {\r\n                                                    return (\r\n                                                        relatedElements[i]\r\n                                                            .textContent ===\r\n                                                        chanVal\r\n                                                    )\r\n                                                } else {\r\n                                                    return (\r\n                                                        relatedElements[i]\r\n                                                            .attributes[channel]\r\n                                                            .value === chanVal\r\n                                                    )\r\n                                                }\r\n                                            } else {\r\n                                                return (\r\n                                                    relatedElements[i]\r\n                                                        .tagName === chanVal\r\n                                                )\r\n                                            }\r\n                                        }\r\n                                    ),\r\n                                })\r\n                            }\r\n                        )\r\n                    }\r\n                }\r\n\r\n                if (encodingDetailDescription.children.length == 0) {\r\n                    encodingDetailDescription.children.push({\r\n                        template: DESCRIPTION_TEMPLATE.correlationUndefined, // `However, the correlation between ${channel} and ${attrName} are not determined yet.`\r\n                        parameters: [\r\n                            {\r\n                                type: PARAMETER_TYPE.channel,\r\n                                value: channel,\r\n                            },\r\n                            {\r\n                                type: PARAMETER_TYPE.attribute,\r\n                                value: attrName,\r\n                            },\r\n                        ],\r\n                        elements: relatedElements,\r\n                        elementsIdx: relatedElementsIdx,\r\n                    })\r\n                }\r\n\r\n                result.push(encodingDetailDescription)\r\n            })\r\n            // For numerical to categorical:\r\n            // For categorical to categorical:\r\n        })\r\n        return result\r\n    }\r\n\r\n    // console.log(layoutDescriptions)\r\n    // console.log(allElements)\r\n    // console.log(allElementsIdx)\r\n\r\n    const elementInfo = []\r\n    const label2Encodings = {}\r\n    configs.forEach(\r\n        ({ entityType, entity2element, element2label, label2attr2diff }) => {\r\n            entity2element.forEach((eleIndexSet, entityIndex) => {\r\n                eleIndexSet.forEach((eleIndex) => {\r\n                    elementInfo[eleIndex] = {\r\n                        entityType,\r\n                        entityIndex,\r\n                    }\r\n                })\r\n            })\r\n            element2label.forEach((label, idx) => {\r\n                if (Number.isInteger(label)) {\r\n                    elementInfo[idx].label = label\r\n                }\r\n            })\r\n            label2Encodings[entityType] = label2attr2diff\r\n        }\r\n    )\r\n    console.log(label2Encodings)\r\n    // console.log(elementInfo)\r\n\r\n    // Step4: Detect Layout Meanings\r\n    // Step4.1: Generate x/y positions for each node\r\n    const nodeAttrs = Array.from(\r\n        NoLinDiagram.getAttributesOf(data).nodes.entries()\r\n    ) //! should before position computing\r\n\r\n    document.body.appendChild(svg)\r\n    const svgBBox = svg.getBoundingClientRect()\r\n    node2element.forEach((elementIndexSet, entityIndex) => {\r\n        const elements = Array.from(elementIndexSet).map(\r\n            (elementIndex) =>\r\n                nldComponents.basicElementArray[elementIndex].element\r\n        )\r\n\r\n        const min = {\r\n            x: Infinity,\r\n            y: Infinity,\r\n        }\r\n        const max = {\r\n            x: -Infinity,\r\n            y: -Infinity,\r\n        }\r\n\r\n        elements.forEach((element) => {\r\n            const box = element.getBoundingClientRect()\r\n            const x = box.x - svgBBox.x\r\n            const y = box.y - svgBBox.y\r\n            min.x = Math.min(min.x, x + box.width / 2)\r\n            max.x = Math.max(max.x, x + box.width / 2)\r\n\r\n            min.y = Math.min(min.y, y + box.height / 2)\r\n            max.y = Math.max(max.y, y + box.height / 2)\r\n        })\r\n\r\n        data.nodes[entityIndex].x = (max.x + min.x) / 2\r\n        data.nodes[entityIndex].y = (max.y + min.y) / 2\r\n    })\r\n    document.body.removeChild(svg)\r\n    const endTime = performance.now()\r\n    console.log(\"Computing time:\", endTime - beginTime, \"ms\")\r\n\r\n    const allElements = nldComponents.basicElementArray.map((_) => _.element)\r\n    // add idx to element\r\n    allElements.forEach((el, i) => {\r\n        el.setAttribute(\"idx\", i)\r\n    })\r\n    const allElementsIdx = new Array(nldComponents.basicElementArray.length)\r\n        .fill()\r\n        .map((_, i) => i)\r\n    const xs = data.nodes.map((n) => n.x)\r\n    const ys = data.nodes.map((n) => n.y)\r\n    const xAttrs = []\r\n    const yAttrs = []\r\n\r\n    for (let i = 0; i < nodeAttrs.length; i++) {\r\n        const attrName = nodeAttrs[i][0]\r\n        // const CONNECTOR = \"@\"\r\n        let attrVals = nodeAttrs[i][1].range\r\n        // if (attrName.indexOf(CONNECTOR) > 0) {\r\n        //     attrVals = data.nodes.map(\r\n        //         (n) =>\r\n        //             n[attrName.split(CONNECTOR)[0]][\r\n        //                 attrName.split(CONNECTOR)[1]\r\n        //             ]\r\n        //     )\r\n        // } else {\r\n        //     attrVals = data.nodes.map((n) => n[attrName])\r\n        // }\r\n\r\n        // console.log(i, nodeAttrs.length, attrName, attrVals)\r\n        // const xRelation = await attributeRelation(xs, attrVals)\r\n        const xRelation = attributeRelation(xs, attrVals)\r\n        // if (xRelation?.pearson?.pvalue <= 0.05) {\r\n        if (Math.abs(xRelation?.correlation) > threshold) {\r\n            // console.log(attrName, \"x\")\r\n            xAttrs.push({\r\n                name: attrName,\r\n                // type: xRelation?.pearson?.correlation > 0,\r\n                type: xRelation?.correlation > 0,\r\n            })\r\n        }\r\n        // const yRelation = await attributeRelation(ys, attrVals)\r\n        const yRelation = attributeRelation(ys, attrVals)\r\n        // if (yRelation?.pearson?.pvalue <= 0.05) {\r\n        if (Math.abs(yRelation?.correlation) > threshold) {\r\n            // console.log(attrName, \"y\")\r\n            yAttrs.push({\r\n                name: attrName,\r\n                // type: yRelation?.pearson?.correlation > 0,\r\n                type: yRelation?.correlation > 0,\r\n            })\r\n        }\r\n    }\r\n\r\n    // console.log(xAttrs, yAttrs)\r\n    const layoutDescriptions = []\r\n    if (xAttrs.length > 0 && yAttrs.length > 0) {\r\n        // attribute-layout\r\n        ;[\r\n            { axis: \"x\", attrs: xAttrs },\r\n            { axis: \"y\", attrs: yAttrs },\r\n        ].forEach(({ axis, attrs }) => {\r\n            layoutDescriptions.push({\r\n                template: (axis, attrNames) => {\r\n                    return `The ${axis}-coordinate encodes ${\r\n                        attrNames.length > 1 ? \"\" : \"the\"\r\n                    } attribute${\r\n                        attrNames.length > 1 ? \"\" : \"s\"\r\n                    } ${textualizeStringArray(attrNames)}`\r\n                },\r\n                parameters: [\r\n                    {\r\n                        type: PARAMETER_TYPE.channel,\r\n                        value: axis,\r\n                    },\r\n                    {\r\n                        type: PARAMETER_TYPE.attribute,\r\n                        value: attrs.map((_) => _.name),\r\n                    },\r\n                ],\r\n                elements: [],\r\n                elementsIdx: allElementsIdx.filter(\r\n                    (idx) => elementInfo[idx]?.entityType === \"node\"\r\n                ),\r\n                children: attrs.map((attr) => ({\r\n                    template: (axis, attrName) => {\r\n                        return `The greater the ${attrName} is, the ${\r\n                            attr.type ? \"greater📈\" : \"smaller📉\"\r\n                        } the ${axis}-coordinate is.`\r\n                    },\r\n                    parameters: [\r\n                        {\r\n                            type: PARAMETER_TYPE.channel,\r\n                            value: axis,\r\n                        },\r\n                        {\r\n                            type: PARAMETER_TYPE.attribute,\r\n                            value: attr.name,\r\n                        },\r\n                    ],\r\n                    elements: allElements,\r\n                    elementsIdx: allElementsIdx,\r\n                })),\r\n            })\r\n        })\r\n    }\r\n\r\n    // // topology-layout\r\n    // const correlation = await fetch(BACKEND_URL + \"layout-correlation\", {\r\n    //     method: \"POST\",\r\n    //     headers: {\r\n    //         \"Content-Type\": \"application/json\",\r\n    //     },\r\n    //     body: JSON.stringify(data),\r\n    // }).then((res) => res.json())\r\n    const correlation = layoutRelation(data)\r\n\r\n    if (Math.abs(correlation) > 0.3) {\r\n        layoutDescriptions.push({\r\n            template: () => {\r\n                // return `The layout is a topology-based layout, which means the farther the topology distance between two nodes, the farther the distance between them.`\r\n                return `The layout is a topology-based layout, the farther the geodesic distance (the length of the shortest path) between two nodes, the farther the Euclidean distance between them.`\r\n            },\r\n            parameters: [],\r\n            elements: allElements,\r\n            elementsIdx: allElementsIdx,\r\n        })\r\n    } else if (xAttrs.length === 0 && yAttrs.length === 0) {\r\n        layoutDescriptions.push({\r\n            template: () => {\r\n                return `The layout is neither an attribute-based layout nor a topology-based layout.`\r\n            },\r\n            parameters: [],\r\n            elements: allElements,\r\n            elementsIdx: allElementsIdx,\r\n        })\r\n    }\r\n\r\n    return {\r\n        svg,\r\n        allElements,\r\n        allElementsIdx,\r\n        descriptions,\r\n        layoutDescriptions,\r\n        elementInfo,\r\n        label2Encodings,\r\n    }\r\n}\r\n","import { extractAttributes } from \"./utils.js\";\r\nimport {\r\n    generateLinkingConditions,\r\n    unionCondition,\r\n    excludeCondition,\r\n    accumulateCondition,\r\n} from './conditionOperations.js'\r\n\r\n\r\nfunction linkCondition(data, threshold = 0.8) {\r\n    const attrs = extractAttributes(data)\r\n\r\n    const nodeMap = {}\r\n    data.nodes.forEach(n => {\r\n        nodeMap[n.id] = n\r\n    })\r\n\r\n    // linkset\r\n\r\n    const linkSet = new Set()\r\n\r\n    data.links.forEach(l => {\r\n        linkSet.add(`${l.source}+${l.target}`)\r\n        linkSet.add(`${l.target}+${l.source}`)\r\n    })\r\n\r\n    // 没有边的，求并集\r\n\r\n    let excludeUnionResult = {}\r\n\r\n    Object.keys(nodeMap).forEach(source => {\r\n        Object.keys(nodeMap).forEach(target => {\r\n            const term = `${source}+${target}`\r\n            if (source === target || linkSet.has(term)) {\r\n                return\r\n            }\r\n\r\n            const conditions = generateLinkingConditions(nodeMap[source], nodeMap[target], attrs)\r\n            excludeUnionResult = unionCondition(excludeUnionResult, conditions)\r\n        })\r\n    })\r\n\r\n    /*\r\n    console.log('invalid condition union:')\r\n    console.log(excludeUnionResult)\r\n    */\r\n\r\n    // 有边的，逐个累计\r\n\r\n    let result = null\r\n\r\n    data.links.forEach(l => {\r\n        const sourceNode = nodeMap[l.source]\r\n        const targetNode = nodeMap[l.target]\r\n        const conditions = generateLinkingConditions(sourceNode, targetNode, attrs)\r\n        if (!result) {\r\n            result = excludeCondition(conditions, excludeUnionResult)\r\n        } else {\r\n            result = accumulateCondition(result, excludeCondition(conditions, excludeUnionResult))\r\n        }\r\n    })\r\n\r\n    /*\r\n    console.log('-------------------------------')\r\n    console.log('valid condition:')\r\n    console.log(result)\r\n    */\r\n\r\n\r\n    // 筛选出足够有说服力的\r\n\r\n    const linkCnt = data.links.length\r\n\r\n    const possibleConditions = []\r\n\r\n    for (const attr in result) {\r\n        for (const relation in result[attr]) {\r\n            if (typeof result[attr][relation] === 'number') {\r\n                // similar 特判\r\n                // TODO: 暂不考虑similar的结果\r\n                continue;\r\n            } else {\r\n                for (const value in result[attr][relation]) {\r\n                    if (result[attr][relation][value] > linkCnt * threshold) {\r\n                        possibleConditions.push({\r\n                            attribute: attr,\r\n                            relation: relation,\r\n                            value: value,\r\n                            frequency: result[attr][relation][value],\r\n                            coverage: result[attr][relation][value] / linkCnt\r\n                        })\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /*\r\n    console.log('-------------------------------')\r\n    console.log('final possible conditions:')\r\n    console.log(possibleConditions) \r\n    */\r\n\r\n    return possibleConditions\r\n\r\n\r\n    // debug\r\n\r\n    // const link1 = data.links[1]\r\n    // const cond1 = generateLinkingConditions(nodeMap[link1.source], nodeMap[link1.target], attrs)\r\n    // console.log(cond1)\r\n}\r\n\r\nexport {\r\n    linkCondition\r\n}","import { Card } from \"antd\"\r\nimport { useHistory } from \"react-router\"\r\nimport \"./GallaryItem.css\"\r\n\r\nexport function GallaryItem({ title, image, children, route }) {\r\n    const history = useHistory()\r\n    return (\r\n        <Card\r\n            hoverable\r\n            style={{\r\n                width: 350,\r\n                height: 420,\r\n                margin: 10,\r\n                borderRadius: 7,\r\n            }}\r\n            cover={\r\n                <img\r\n                    alt={title}\r\n                    src={image}\r\n                    style={{\r\n                        width: 320,\r\n                        height: 320,\r\n                        objectFit: \"contain\",\r\n                        borderRadius: \"7px 7px 0 0\",\r\n                    }}\r\n                />\r\n            }\r\n            onClick={() => {\r\n                history.push(route)\r\n            }}\r\n        >\r\n            <Card.Meta\r\n                style={{\r\n                    whiteSpace: \"normal\",\r\n                    height: 40,\r\n                }}\r\n                title={title}\r\n            />\r\n            <div\r\n                style={{\r\n                    height: 30,\r\n                    lineHeight: \"25px\",\r\n                    textOverflow: \"ellipsis\",\r\n                    overflow: \"hidden\",\r\n                }}\r\n            >\r\n                {children}\r\n            </div>\r\n        </Card>\r\n    )\r\n}\r\n","import { GallaryItem } from \"../components/GallaryItem\"\r\nimport { TitleBar } from \"../components/TitleBar\"\r\nimport \"./HomePage.css\"\r\n\r\nfunction HomePage() {\r\n    return (\r\n        <div\r\n            style={{\r\n                height: \"100vh\",\r\n                display: \"flex\",\r\n                alignItems: \"center\",\r\n                flexDirection: \"column\",\r\n                overflow: \"initial\",\r\n                backgroundColor: \"#f5f5f5\",\r\n            }}\r\n        >\r\n            <TitleBar />\r\n            <div\r\n                style={{\r\n                    width: \"80%\",\r\n                    maxWidth: 1300,\r\n                    marginTop: 80,\r\n                    marginBottom: 80,\r\n                }}\r\n            >\r\n                {/* <div\r\n                    style={{\r\n                        display: \"flex\",\r\n                        flexDirection: \"column\",\r\n                        padding: \"0 10px 0 10px\",\r\n                    }}\r\n                >\r\n                    <h1\r\n                        style={{\r\n                            fontFamily: \"Times\",\r\n                            fontSize: \"30px\",\r\n                            fontWeight: \"600\",\r\n                            borderBottom: \"2px #000 solid\",\r\n                        }}\r\n                    >\r\n                        GraphDescriptor: An Automatic Description Generator\r\n                        for Node-Link Diagrams\r\n                    </h1>\r\n                    <img\r\n                        alt=\"main\"\r\n                        src=\"main.jpg\"\r\n                        style={{\r\n                            width: \"60%\",\r\n                            margin: \"20px auto 20px auto\",\r\n                        }}\r\n                    /> \r\n                    <p\r\n                        style={{\r\n                            fontFamily: \"Times\",\r\n                            fontSize: \"1.2em\",\r\n                        }}\r\n                    >\r\n                        Node-link diagrams can effectively reveal relations and attributes of entities. However, non-professional users may have a low ability to read visual forms or be unskilled in exploring cluttered diagrams. This paper presents GraphDescriptor, an automatic description generation approach for node-link diagrams. The key idea is to extract relevant information from both the underlying data and the source code of visualization and generate textual descriptions with a template-based scheme. We design and develop an interactive interface for interactive specification, exploration, and modulation of descriptions. Diverse examples and a user study verify the utility and effectiveness of GraphDescriptor.\r\n                    </p>\r\n                </div>\r\n                <div\r\n                    style={{\r\n                        fontFamily: \"Times\",\r\n                        fontSize: 30,\r\n                        fontWeight: 600,\r\n                        margin: \"0 10px 10px 10px\",\r\n                        height: 50,\r\n                        borderBottom: \"2px #000 solid\",\r\n                    }}\r\n                >\r\n                    Gallary\r\n                </div> */}\r\n                <div\r\n                    style={{\r\n                        display: \"flex\",\r\n                        height: \"40vh\",\r\n                        flexWrap: \"wrap\",\r\n                        justifyContent: \"space-around\",\r\n                    }}\r\n                >\r\n                    <GallaryItem\r\n                        image={\"./data/imdb-movies-raw/imdb-movies.png\"}\r\n                        title={\"Movie-Actor-2019-China\"}\r\n                        route={\"/imdb-movies\"}\r\n                    >\r\n                        <span class=\"description-parameter\">49</span> nodes and{\" \"}\r\n                        <span class=\"description-parameter\">99</span> links\r\n                    </GallaryItem>\r\n                    <GallaryItem\r\n                        image={\r\n                            \"./data/imdb-movies-shapes/imdb-movies-shapes.png\"\r\n                        }\r\n                        title={\"Movie-Actor-Jean-Pierre\"}\r\n                        route={\"/imdb-movies-shapes\"}\r\n                    >\r\n                        <span class=\"description-parameter\">14</span> nodes and{\" \"}\r\n                        <span class=\"description-parameter\">25</span> links\r\n                    </GallaryItem>\r\n                    {/* </div>\r\n                <div\r\n                    style={{\r\n                        display: \"flex\",\r\n                        height: \"40vh\",\r\n                        flexWrap: \"wrap\",\r\n                        justifyContent: \"space-around\",\r\n                    }}\r\n                > */}\r\n                    <GallaryItem\r\n                        image={\"./data/imdb-actors/imdb-actors.png\"}\r\n                        title={\"Actor-Movie-2016-2021-China\"}\r\n                        route={\"/imdb-actors\"}\r\n                    >\r\n                        <span class=\"description-parameter\">17</span> nodes and{\" \"}\r\n                        <span class=\"description-parameter\">55</span> links\r\n                    </GallaryItem>\r\n                    <GallaryItem\r\n                        image={\"./data/imdb-movies-link/imdb-movies-link.png\"}\r\n                        title={\"Movie-Year-Nolan\"}\r\n                        route={\"/imdb-movies-link\"}\r\n                    >\r\n                        <span class=\"description-parameter\">11</span> nodes and{\" \"}\r\n                        <span class=\"description-parameter\">16</span> links\r\n                    </GallaryItem>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport { HomePage }\r\n","import { Main } from \"./Main\"\r\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\"\r\nimport { HomePage } from \"./pages/HomePage\"\r\nimport \"./utils/color.js\"\r\n\r\nconst titleMap = {\r\n    \"imdb-movies-shapes\": \"Movie-Actor-Jean-Pierre\",\r\n    \"imdb-movies\": \"Movie-Actor-2019-China\",\r\n    \"imdb-actors\": \"Actor-Movie-2016-2021-China\",\r\n    \"imdb-movies-link\": \"Movie-Year-Nolan\",\r\n}\r\n\r\nconst nodeMeaningsMap = {\r\n    \"imdb-movies-shapes\": \"movies directed by Jean-Pierre Melville\",\r\n    \"imdb-movies\": \"movies published in China from 2019 to 2020\",\r\n    \"imdb-actors\":\r\n        \"actors who acted in more than five Chinese movies from 2016 to 2021\",\r\n    \"imdb-movies-link\": \"movies directed by Christopher Nolan\",\r\n}\r\n\r\nfunction App() {\r\n    return (\r\n        <Router>\r\n            <Switch>\r\n                <Route exact path=\"/\">\r\n                    <HomePage />\r\n                </Route>\r\n                <Route\r\n                    path=\"/:demo\"\r\n                    render={({ match }) => {\r\n                        return (\r\n                            <Main\r\n                                title={titleMap[match.params.demo]}\r\n                                nodeMeanings={\r\n                                    nodeMeaningsMap[match.params.demo]\r\n                                }\r\n                            />\r\n                        )\r\n                    }}\r\n                ></Route>\r\n            </Switch>\r\n        </Router>\r\n    )\r\n}\r\n\r\nexport default App\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\nimport \"./index.css\"\r\nimport App from \"./App\"\r\nimport reportWebVitals from \"./reportWebVitals\"\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    document.getElementById(\"root\")\r\n)\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals()\r\n"],"sourceRoot":""}